//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.0.280225.1+7cd366a738
//
//       Command:
//           LottieGen -Language Cppwinrt -Namespace CppWinUIGallery -WinUIVersion 3.0 -InputFile AnimatedLogo.json
//
//       Input file:
//           AnimatedLogo.json (193407 bytes created 17:21+03:00 Aug 8 2024)
//
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   178 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     6 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     3 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     2 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |    35 |
// |--------------------------+-------|
// | Brushes                  |     8 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "AnimatedLogo.h"
#include "pch.h"
#if __has_include("AnimatedLogo.g.cpp")
#include "AnimatedLogo.g.cpp"
#endif
#include "d2d1.h"
#include <Windows.Graphics.Interop.h>
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <winrt/Microsoft.UI.Composition.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.Storage.Streams.h>
#include <winrt/Windows.UI.Xaml.Media.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <array>
#include <iostream>
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Microsoft::UI;
using namespace winrt::Microsoft::UI::Composition;
using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Microsoft::UI::Xaml::Media;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::Storage::Streams;
using Color = winrt::Windows::UI::Color;
using CompositionPropertySet = winrt::Microsoft::UI::Composition::CompositionPropertySet;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::CppWinUIGallery::implementation
{
class CanvasGeometry
    : public winrt::implements<CanvasGeometry, IGeometrySource2D, ::ABI::Windows::Graphics::IGeometrySource2DInterop>
{
    winrt::com_ptr<ID2D1Geometry> _geometry{nullptr};

  public:
    CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry) : _geometry{geometry}
    {
    }

    // IGeometrySource2D.
    winrt::com_ptr<ID2D1Geometry> Geometry()
    {
        return _geometry;
    }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP GetGeometry(ID2D1Geometry **value) noexcept(true) override
    {
        _geometry.copy_to(value);
        return S_OK;
    }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory *, ID2D1Geometry **) noexcept(true) override
    {
        return E_NOTIMPL;
    }
};
// Image: "0" png 53x32.
static const std::array<byte, 1639> s_Image_0_Bytes{
    137, 80,  78,  71,  13,  10,  26,  10,  0,   0,   0,   13,  73,  72,  68,  82,  0,   0,   0,   53,  0,   0,   0,
    32,  8,   6,   0,   0,   0,   178, 253, 48,  88,  0,   0,   0,   1,   115, 82,  71,  66,  0,   174, 206, 28,  233,
    0,   0,   0,   4,   103, 65,  77,  65,  0,   0,   177, 143, 11,  252, 97,  5,   0,   0,   0,   9,   112, 72,  89,
    115, 0,   0,   14,  193, 0,   0,   14,  193, 1,   184, 145, 107, 237, 0,   0,   5,   252, 73,  68,  65,  84,  88,
    71,  221, 152, 81,  108, 20,  85,  20,  134, 103, 22,  131, 173, 173, 13,  219, 66,  177, 70,  146, 26,  137, 33,
    49,  38,  173, 169, 111, 4,   74,  194, 3,   162, 198, 150, 68,  173, 9,   6,   26,  5,   131, 47,  116, 211, 196,
    71,  183, 235, 147, 49,  54,  91,  158, 140, 128, 161, 4,   162, 160, 49,  109, 131, 1,   30,  140, 45,  200, 155,
    164, 37,  250, 0,   70,  12,  141, 152, 20,  22,  218, 221, 84,  160, 128, 116, 215, 243, 159, 115, 239, 220, 59,
    179, 211, 118, 186, 221, 190, 248, 195, 236, 61,  247, 220, 217, 185, 231, 235, 185, 247, 204, 204, 58,  255, 71,
    185, 170, 93,  54,  21,  178, 217, 85,  185, 95,  207, 183, 61,  202, 220, 104, 116, 156, 188, 83,  177, 161, 101,
    228, 201, 23,  95,  30,  81,  195, 203, 162, 101, 131, 154, 153, 152, 104, 204, 28,  250, 248, 200, 204, 229, 209,
    86,  199, 117, 105, 34,  215, 41,  208, 63,  194, 116, 30,  171, 123, 106, 124, 237, 222, 158, 206, 229, 130, 43,
    59,  20,  50,  115, 251, 199, 19,  93,  147, 3,   135, 147, 174, 27,  163, 25,  232, 32,  185, 4,   86,  40,  0,
    138, 84,  200, 179, 93,  185, 161, 121, 164, 126, 207, 39,  157, 149, 13,  13,  227, 50,  80,  30,  149, 21,  42,
    123, 110, 104, 119, 230, 104, 58,  93,  184, 127, 119, 149, 27,  139, 17,  8,   160, 40,  71,  116, 64,  194, 68,
    31,  100, 20,  8,   140, 225, 242, 121, 167, 110, 199, 251, 169, 213, 91,  59,  250, 220, 120, 60,  199, 39,  46,
    81,  101, 129, 250, 231, 183, 95,  90,  167, 6,   14,  38,  103, 174, 140, 181, 2,   4,   64,  200, 144, 7,   133,
    105, 188, 76,  5,   160, 96,  19,  152, 91,  81,  149, 171, 223, 149, 72,  196, 55,  191, 209, 47,  87,  45,  93,
    75,  130, 194, 190, 201, 14,  124, 153, 156, 190, 240, 195, 110, 189, 212, 76,  134, 108, 40,  146, 7,   69,  82,
    48,  210, 154, 140, 193, 94,  185, 110, 253, 165, 53,  59,  187, 19,  75,  217, 111, 37,  67,  221, 250, 238, 139,
    158, 169, 179, 39,  247, 59,  180, 212, 52,  128, 27,  91,  161, 96,  144, 25,  3,   5,   249, 247, 148, 63,  83,
    2,   53,  107, 249, 242, 78,  85,  243, 166, 193, 213, 59,  63,  74,  148, 178, 223, 22,  13,  53,  125, 113, 184,
    45,  115, 180, 55,  253, 104, 242, 70,  35,  32,  24,  6,   193, 135, 101, 136, 129, 0,   136, 111, 210, 135, 134,
    66,  29,  244, 50,  165, 161, 20,  16,  254, 33,  107, 4,   137, 37,  89,  251, 202, 219, 7,   22,  187, 223, 34,
    67,  121, 37,  250, 202, 40,  237, 27,  130, 241, 178, 66,  71,  12,  129, 219, 80,  184, 44,  124, 166, 72,  216,
    18,  16,  157, 45,  213, 98,  175, 241, 18,  212, 126, 216, 148, 61,  242, 225, 22,  80,  183, 99,  79,  42,  190,
    37,  218, 126, 91,  16,  10,  37,  58,  115, 234, 112, 50,  123, 230, 68,  151, 87,  0,   56,  67,  56,  232, 235,
    190, 12,  5,   97,  196, 46,  18,  7,   46,  25,  2,   140, 129, 11,  100, 143, 253, 200, 154, 216, 184, 5,   212,
    182, 239, 77,  45,  180, 223, 66,  102, 52,  202, 14,  83,  137, 62,  134, 18,  125, 135, 74,  180, 44,  53,  129,
    2,   0,   50,  69,  193, 107, 168, 16,  24,  207, 14,  136, 131, 70,  102, 124, 0,   104, 229, 40,  208, 147, 7,
    183, 1,   40,  57,  47,  239, 212, 108, 124, 181, 191, 225, 157, 68,  98,  174, 37,  89,  60,  35,  9,   37,  250,
    214, 241, 222, 244, 195, 235, 87,  155, 100, 121, 233, 76,  104, 27,  203, 47,  2,   140, 5,   5,   19,  49,  139,
    84,  240, 10,  2,   143, 79,  198, 14,  207, 152, 183, 231, 148, 173, 247, 219, 154, 55,  247, 245, 240, 37,  45,
    201, 140, 74,  216, 55,  183, 143, 127, 150, 190, 59,  118, 190, 77,  178, 98,  5,   239, 131, 210, 62,  9,   154,
    33,  230, 178, 67,  133, 192, 209, 88,  16,  12,  170, 64,  124, 208, 2,   194, 125, 93,  33,  85,  230, 112, 96,
    191, 213, 239, 234, 78,  212, 180, 108, 25,  164, 47,  178, 120, 86,  253, 104, 51,  117, 134, 74,  244, 3,   83,
    162, 185, 13,  131, 194, 215, 40,  224, 96,  70,  252, 64,  212, 200, 229, 173, 22,  1,   139, 236, 224, 209, 10,
    128, 140, 23,  143, 73,  118, 60,  104, 238, 207, 202, 24,  131, 250, 31,  185, 92,  0,   93,  251, 116, 223, 176,
    94,  106, 136, 198, 11,  94,  129, 248, 90,  84,  58,  13,  128, 96,  61,  8,   21,  184, 175, 143, 113, 246, 250,
    197, 177, 43,  16,  95,  240, 226, 135, 97,  143, 121, 32,  116, 152, 22,  126, 213, 231, 204, 21,  120, 73,  54,
    124, 152, 236, 140, 221, 249, 251, 106, 211, 195, 191, 254, 104, 162, 48,  36,  6,   4,   163, 3,   18,  135, 231,
    211, 129, 154, 128, 237, 62,  204, 224, 56,  59,  139, 15,  52,  244, 81,  124, 29,  248, 97,  202, 24,  143, 207,
    211, 210, 135, 28,  202, 135, 130, 150, 61,  253, 245, 254, 88,  245, 51,  235, 47,  185, 149, 85,  57,  226, 38,
    106, 190, 228, 2,   210, 23,  19,  241, 181, 61,  3,   23,  151, 174, 156, 98,  206, 243, 139, 252, 106, 72,  206,
    71,  31,  6,   125, 95,  15,  176, 196, 231, 87,  152, 15,  146, 172, 214, 180, 108, 26,  138, 161, 44,  62,  223,
    59,  244, 108, 205, 198, 215, 250, 205, 218, 13,  75,  191, 234, 211, 33,  99,  48,  253, 231, 201, 24,  143, 176,
    107, 110, 225, 124, 101, 113, 139, 190, 56,  148, 155, 229, 93,  91,  29,  18,  135, 89,  134, 182, 189, 162, 118,
    237, 248, 211, 221, 159, 183, 199, 183, 191, 219, 231, 67,  214, 165, 252, 223, 235, 127, 54,  233, 155, 170, 247,
    228, 192, 125, 169, 134, 232, 227, 175, 101, 255, 149, 121, 73,  40,  91,  198, 180, 173, 5,   219, 10,  89,  5,
    44,  141, 21,  52,  206, 225, 96,  201, 212, 247, 43,  85,  237, 216, 207, 54,  21,  9,   237, 67,  105, 223, 214,
    65,  143, 82,  111, 121, 143, 82,  246, 172, 158, 244, 123, 145, 84,  66,  83,  214, 13,  32,  110, 196, 18,  60,
    2,   23,  0,   156, 19,  240, 241, 229, 113, 168, 134, 3,   133, 44,  8,   27,  136, 97,  164, 15,  63,  108, 174,
    114, 236, 23,  32,  182, 85,  105, 199, 234, 138, 183, 127, 144, 10,  62,  244, 170, 25,  139, 37,  101, 254, 91,
    122, 131, 61,  196, 111, 176, 146, 33,  13,  168, 50,  102, 3,   48,  20,  206, 9,   203, 26,  174, 136, 15,  4,
    10,  91,  130, 150, 190, 6,   144, 172, 24,  159, 64,  136, 95,  158, 1,   53,  216, 202, 117, 207, 205, 251, 122,
    194, 211, 205, 39,  115, 67,  254, 185, 205, 6,   226, 172, 57,  26,  66,  1,   217, 229, 94,  249, 195, 167, 48,
    48,  62,  136, 96,  171, 50,  34,  25,  162, 140, 61,  30,  237, 69,  114, 65,  40,  45,  236, 183, 155, 7,   83,
    71,  102, 39,  111, 54,  242, 126, 195, 18,  228, 101, 104, 192, 144, 45,  92,  210, 7,   5,   59,  40,  31,  140,
    201, 146, 180, 128, 82,  32,  26,  138, 142, 248, 182, 142, 190, 250, 215, 223, 75,  69,  121, 5,   137, 12,  165,
    149, 61,  125, 172, 43,  243, 253, 87,  73,  231, 254, 61,  254, 29,  2,   32,  118, 1,   241, 67,  226, 242, 176,
    241, 77,  124, 0,   6,   241, 11,  20,  25,  28,  176, 253, 216, 35,  25,  130, 45,  75,  174, 148, 31,  103, 22,
    13,  5,   121, 175, 35,  103, 79,  118, 33,  120, 1,   82,  203, 146, 97,  196, 199, 182, 158, 130, 201, 0,   130,
    142, 181, 228, 20,  144, 189, 111, 224, 71,  137, 14,  62,  211, 69,  85,  73,  80,  90,  230, 197, 113, 172, 85,
    32,  130, 25,  19,  56,  76,  99,  229, 137, 254, 75,  134, 120, 137, 161, 101, 27,  85,  142, 198, 42,  158, 160,
    18,  29,  254, 244, 29,  85,  75,  130, 210, 210, 175, 248, 179, 83,  180, 223, 20,  144, 129, 67,  65,  33,  233,
    153, 152, 76,  128, 252, 203, 13,  37,  122, 251, 188, 239, 73,  81,  85,  22,  40,  173, 57,  127, 140, 129, 176,
    252, 120, 47,  161, 209, 25,  162, 140, 81,  134, 162, 190, 209, 70,  85,  89,  161, 32,  236, 183, 137, 111, 14,
    164, 167, 47,  156, 226, 159, 205, 144, 41,  160, 200, 189, 11,  210, 85,  142, 188, 17,  75,  244, 98,  85,  118,
    40,  45,  243, 3,   231, 104, 43,  166, 209, 80,  156, 44,  130, 42,  247, 175, 178, 182, 150, 13,  74,  235, 193,
    181, 223, 155, 166, 47,  254, 212, 118, 239, 242, 232, 230, 88,  101, 117, 174, 250, 133, 151, 206, 85,  52,  111,
    29,  44,  247, 239, 231, 70,  142, 243, 31,  155, 232, 94,  168, 59,  6,   172, 78,  0,   0,   0,   0,   73,  69,
    78,  68,  174, 66,  96,  130};

// Image: "1" png 30x47.
static const std::array<byte, 1440> s_Image_1_Bytes{
    137, 80,  78,  71,  13,  10,  26,  10,  0,   0,   0,   13,  73,  72,  68,  82,  0,   0,   0,   30,  0,   0,   0,
    47,  8,   6,   0,   0,   0,   244, 22,  122, 170, 0,   0,   0,   1,   115, 82,  71,  66,  0,   174, 206, 28,  233,
    0,   0,   0,   4,   103, 65,  77,  65,  0,   0,   177, 143, 11,  252, 97,  5,   0,   0,   0,   9,   112, 72,  89,
    115, 0,   0,   14,  193, 0,   0,   14,  193, 1,   184, 145, 107, 237, 0,   0,   5,   53,  73,  68,  65,  84,  88,
    71,  189, 152, 77,  104, 93,  69,  20,  199, 239, 220, 155, 23,  45,  182, 146, 104, 99,  145, 164, 240, 94,  193,
    186, 113, 145, 172, 4,   23,  154, 128, 155, 238, 204, 70,  68,  84,  26,  20,  84,  80,  72,  69,  69,  220, 164,
    89,  232, 66,  144, 6,   55,  10,  34,  169, 180, 136, 8,   98,  119, 46,  92,  164, 91,  87,  47,  32,  82,  90,
    63,  242, 180, 138, 182, 77,  155, 96,  43,  105, 222, 199, 29,  207, 255, 204, 57,  115, 231, 126, 36,  169, 109,
    146, 83,  254, 239, 204, 204, 157, 57,  191, 57,  115, 230, 190, 182, 47,  218, 45,  179, 107, 127, 213, 187, 43,
    223, 30,  133, 151, 161, 157, 53,  107, 87,  6,   122, 151, 62,  58,  209, 61,  55,  110, 187, 231, 158, 176, 237,
    243, 71,  86,  48,  110, 248, 233, 14,  89,  186, 252, 213, 116, 247, 234, 252, 76,  156, 174, 13,  100, 168, 52,
    74,  70,  230, 38,  98,  233, 109, 171, 217, 235, 205, 241, 206, 79,  207, 44,  165, 87,  62,  62,  17,  167, 235,
    3,   145, 33,  140, 81,  176, 243, 219, 10,  70,  253, 122, 173, 233, 133, 222, 31,  111, 44,  152, 222, 229, 186,
    3,   2,   161, 202, 14,  120, 91,  192, 92,  199, 43,  243, 199, 123, 173, 103, 151, 236, 205, 31,  198, 35,  147,
    208, 104, 31,  41,  4,   146, 56,  235, 109, 202, 216, 210, 77,  237, 92,  120, 110, 201, 94,  61,  61,  19,  153,
    26,  197, 37,  32,  139, 66,  99,  3,   128, 113, 214, 25,  20,  118, 219, 96,  212, 177, 251, 235, 139, 205, 222,
    223, 31,  204, 199, 182, 77,  117, 36,  104, 12,  32,  96,  8,   27,  10,  112, 133, 58,  255, 191, 193, 92,  199,
    139, 239, 126, 131, 58,  70,  237, 223, 70,  163, 24,  192, 26,  197, 237, 163, 144, 9,   73,  188, 110, 192, 111,
    226, 54,  51,  214, 58,  118, 126, 127, 169, 105, 255, 253, 254, 41,  119, 172, 80,  63,  65,  224, 1,   82,  152,
    243, 134, 194, 67,  197, 108, 97,  183, 4,   198, 55,  78,  247, 231, 87,  155, 118, 249, 212, 76,  118, 172, 146,
    37,  215, 83,  161, 1,   156, 129, 10,  13,  178, 21,  183, 41,  216, 222, 56,  63,  218, 110, 189, 190, 16,  81,
    29,  77,  111, 185, 238, 106, 232, 96,  14,  40,  162, 163, 101, 49,  8,   33,  21,  238, 128, 248, 195, 27,  128,
    44,  13,  145, 85,  130, 249, 88,  255, 124, 127, 190, 119, 241, 229, 102, 188, 246, 35,  189, 30,  146, 21,  234,
    23,  2,   253, 101, 18,  133, 27,  208, 140, 25,  225, 54,  192, 38,  174, 4,   238, 93,  162, 58,  94,  160, 247,
    241, 159, 239, 142, 230, 130, 146, 220, 133, 81,  48,  181, 25,  2,   9,   68,  165, 25,  50,  92,  219, 121, 195,
    44,  54,  100, 137, 99,  181, 215, 62,  167, 239, 214, 155, 84,  71,  4,   198, 66,  23,  60,  151, 169, 127, 134,
    203, 131, 155, 12,  133, 151, 9,   97,  225, 1,   44,  202, 25,  102, 176, 165, 151, 233, 226, 172, 209, 183, 14,
    30,  250, 93,  43,  20,  32,  215, 214, 160, 24,  3,   144, 251, 156, 21,  188, 107, 251, 154, 194, 179, 202, 134,
    40,  156, 173, 189, 246, 245, 52,  143, 72,  224, 50,  84,  2,   51,  84,  231, 136, 247, 2,   36,  108, 147, 100,
    3,   188, 153, 192, 48,  35,  138, 174, 35,  83,  152, 44,  240, 1,   49,  153, 124, 0,   96,  104, 78,  50,  95,
    197, 235, 67,  144, 235, 103, 230, 218, 152, 25,  165, 235, 191, 140, 102, 19,  68,  88,  236, 131, 137, 215, 182,
    30,  187, 108, 134, 58,  153, 60,  68,  199, 196, 184, 137, 15,  247, 62,  97,  149, 152, 76,  10,  225, 26,  20,
    99,  4,   245, 23,  135, 55,  32,  115, 114, 243, 33,  152, 120, 237, 86,  60,  11,  192, 48,  153, 160, 16,  238,
    195, 111, 1,   245, 89,  194, 138, 237, 176, 15,  43,  101, 172, 38,  19,  37,  203, 12,  166, 210, 64,  26,  84,
    228, 51,  135, 105, 127, 99,  67,  36,  49,  93,  136, 107, 145, 7,   241, 69,  241, 129, 100, 30,  119, 117, 172,
    194, 44,  101, 198, 74,  69,  200, 20,  125, 247, 56,  3,   23,  51,  100, 97,  12,  193, 69,  10,  247, 99,  48,
    109, 107, 31,  145, 9,   196, 94,  5,   11,  219, 185, 140, 97,  197, 32,  176, 176, 31,  62,  87,  133, 0,   18,
    103, 166, 150, 141, 103, 163, 174, 85,  0,   35,  84,  24,  20,  151, 138, 124, 85,  214, 108, 89,  96,  127, 148,
    220, 78,  233, 51,  232, 231, 228, 172, 34,  99,  53,  109, 23,  128, 188, 54,  12,  66,  222, 215, 79,  199, 165,
    173, 210, 177, 192, 74,  25,  51,  64,  21,  110, 196, 175, 211, 134, 4,   203, 5,   118, 125, 180, 178, 49,  56,
    140, 139, 23,  11,  192, 10,  9,   128, 158, 171, 65,  68,  62,  64,  113, 172, 90,  110, 43,  184, 112, 153, 149,
    51,  246, 11,  212, 5,   253, 208, 56,  11,  125, 86,  144, 127, 133, 160, 158, 243, 12,  134, 108, 100, 246, 141,
    157, 173, 0,   135, 38,  199, 230, 63,  84,  89,  16,  22,  111, 128, 250, 4,   177, 12,  130, 186, 52,  70,  125,
    157, 43,  27,  53,  123, 31,  59,  67,  3,   97,  198, 88,  12,  39,  193, 180, 31,  182, 121, 49,  130, 72,  32,
    14,  136, 192, 14,  230, 161, 232, 3,   234, 55,  33,  186, 171, 177, 24,  143, 188, 53,  69,  15,  139, 53,  86,
    128, 54,  181, 1,   1,   80,  144, 4,   4,   32,  7,   77,  187, 149, 208, 228, 129, 183, 167, 140, 25,  92,  165,
    73,  229, 26,  151, 222, 63,  202, 140, 199, 138, 217, 178, 15,  179, 162, 163, 133, 210, 14,  141, 73,  91,  100,
    246, 63,  63,  219, 119, 232, 179, 49,  179, 247, 225, 69,  48,  96,  27,  212, 56,  131, 186, 204, 240, 133, 16,
    10,  64,  100, 149, 7,   88,  11,  104, 135, 218, 78,  230, 158, 71,  207, 36,  245, 47,  26,  201, 208, 212, 113,
    14,  27,  88,  185, 198, 236, 1,   37,  32,  67,  51,  184, 102, 201, 146, 186, 50,  52,  109, 211, 163, 117, 246,
    12,  237, 175, 47,  38,  195, 31,  78,  36,  7,   223, 155, 52,  123, 30,  108, 209, 228, 146, 21,  50,  86,  104,
    232, 11,  64,  15,  67,  86,  4,   180, 235, 36,  0,   219, 81,  106, 250, 87,  147, 3,   111, 78,  245, 29,  250,
    116, 12,  175, 12,  34,  110, 100, 229, 163, 6,   143, 55,  64,  48,  133, 202, 45,  117, 71,  10,  143, 35,  69,
    150, 4,   20,  153, 193, 201, 185, 218, 225, 83,  13,  51,  120, 228, 36,  77,  222, 210, 170, 51,  102, 58,  164,
    192, 76,  92,  71,  100, 171, 192, 187, 31,  57,  203, 117, 60,  240, 218, 49,  189, 177, 183, 98,  121, 48,  152,
    2,   245, 23,  137, 97,  122, 153, 220, 241, 210, 191, 14,  35,  155, 220, 223, 74,  70,  168, 142, 245, 185, 137,
    141, 234, 184, 153, 21,  46,  151, 170, 88,  83,  8,   199, 220, 161, 39,  181, 213, 120, 232, 149, 99,  181, 135,
    190, 108, 108, 85,  199, 205, 44,  3,   7,   217, 186, 186, 74,  125, 21,  138, 99,  221, 247, 228, 201, 218, 225,
    211, 141, 120, 255, 211, 115, 152, 125, 39,  86,  145, 113, 0,   149, 11,  197, 117, 60,  248, 201, 88,  50,  252,
    142, 255, 230, 185, 83,  43,  212, 88,  178, 149, 76,  109, 50,  212, 74,  134, 103, 39,  185, 142, 193, 183, 206,
    118, 88,  101, 198, 105, 188, 103, 213, 220, 247, 194, 44,  215, 241, 222, 199, 249, 111, 147, 29,  49,  252, 160,
    130, 223, 24,  241, 91,  35,  254, 67,  190, 107, 63,  116, 238, 190, 69,  209, 127, 127, 170, 237, 183, 111, 144,
    27,  164, 0,   0,   0,   0,   73,  69,  78,  68,  174, 66,  96,  130};

// Image: "2" png 32x48.
static const std::array<byte, 1631> s_Image_2_Bytes{
    137, 80,  78,  71,  13,  10,  26,  10,  0,   0,   0,   13,  73,  72,  68,  82,  0,   0,   0,   32,  0,   0,   0,
    48,  8,   6,   0,   0,   0,   112, 172, 120, 111, 0,   0,   0,   1,   115, 82,  71,  66,  0,   174, 206, 28,  233,
    0,   0,   0,   4,   103, 65,  77,  65,  0,   0,   177, 143, 11,  252, 97,  5,   0,   0,   0,   9,   112, 72,  89,
    115, 0,   0,   14,  193, 0,   0,   14,  193, 1,   184, 145, 107, 237, 0,   0,   5,   244, 73,  68,  65,  84,  88,
    71,  205, 88,  111, 72,  157, 85,  24,  191, 255, 90,  179, 104, 115, 179, 70,  194, 144, 171, 69,  131, 141, 200,
    15,  13,  130, 250, 160, 213, 151, 24,  129, 27,  245, 169, 32,  215, 167, 34,  86,  10,  35,  40,  8,   29,  125,
    8,   42,  80,  42,  234, 91,  22,  12,  130, 129, 90,  44,  86,  4,   165, 253, 89,  108, 100, 232, 214, 230, 178,
    166, 215, 185, 63,  138, 211, 93,  155, 219, 156, 219, 245, 222, 158, 223, 243, 231, 220, 243, 190, 247, 186, 166,
    92,  71,  191, 215, 231, 156, 231, 121, 206, 121, 207, 239, 247, 62,  231, 188, 215, 171, 145, 255, 5,   210, 185,
    92,  121, 207, 201, 169, 198, 67,  99,  23,  27,  52,  117, 203, 16,  69,  243, 233, 111, 103, 218, 190, 30,  154,
    110, 130, 159, 92,  91,  54,  176, 243, 225, 202, 230, 7,   43,  239, 234, 69,  188, 210, 136, 161, 73,  165, 231,
    107, 209, 71,  73,  206, 169, 139, 115, 181, 45,  223, 143, 244, 188, 211, 59,  210, 61,  62,  55,  151, 68,  126,
    37,  193, 2,   0,   144, 71,  113, 145, 19,  35,  235, 59,  59,  219, 240, 74,  231, 95,  169, 47,  142, 140, 183,
    98,  139, 116, 90,  201, 145, 23,  0,   99,  17,  100, 148, 133, 136, 88,  44,  26,  233, 60,  54,  217, 242, 102,
    247, 137, 254, 158, 147, 233, 70,  158, 88,  98,  56,  1,   198, 110, 21,  0,   121, 156, 44,  22,  139, 69,  166,
    174, 102, 146, 31,  29,  30,  235, 120, 235, 187, 225, 158, 63,  198, 103, 235, 244, 142, 146, 32,  47,  128, 32,
    91,  160, 34,  152, 220, 68,  160, 143, 69,  254, 156, 190, 92,  183, 231, 135, 145, 158, 15,  15,  142, 117, 148,
    234, 124, 20,  110, 1,   87,  64,  124, 191, 18,  241, 184, 136, 136, 199, 99,  145, 159, 198, 102, 26,  95,  223,
    63,  220, 143, 243, 33,  119, 47,  31,  161, 10,  248, 34,  164, 26,  44,  128, 72,  89,  4,   89,  130, 124, 216,
    181, 108, 174, 188, 235, 248, 249, 150, 151, 187, 6,   83,  135, 198, 210, 203, 254, 252, 240, 206, 128, 88,  64,
    4,   17,  58,  17,  252, 244, 146, 51,  17,  137, 68,  44,  114, 225, 218, 66,  242, 253, 95,  78,  119, 227, 124,
    164, 210, 151, 248, 117, 94,  10,  68,  0,   181, 188, 255, 184, 248, 201, 97,  148, 86,  17,  206, 40,  14,  87,
    194, 108, 104, 250, 74,  221, 238, 3,   195, 253, 248, 80,  91,  202, 107, 27,  216, 2,   6,   63,  189, 144, 219,
    86,  196, 209, 131, 24,  231, 128, 200, 164, 207, 91,  2,   150, 16,  81,  223, 252, 125, 161, 233, 213, 125, 199,
    83,  251, 7,   39,  249, 147, 245, 191, 16,  20,  0,   114, 117, 1,   8,   225, 106, 208, 44,  121, 114, 57,  11,
    120, 53,  173, 18,  118, 48,  209, 91,  53,  230, 169, 2,   159, 15,  76,  180, 201, 249, 184, 241, 239, 23,  17,
    144, 229, 214, 129, 40,  153, 156, 125, 22,  37,  177, 109, 133, 136, 8,   9,   209, 74,  112, 85,  40,  78,  144,
    77,  205, 103, 146, 239, 253, 156, 234, 198, 199, 250, 98,  219, 18,  168, 128, 123, 122, 56,  120, 114, 38,  103,
    151, 12,  50,  196, 167, 181, 249, 137, 89,  136, 18,  178, 175, 213, 64,  21,  98,  90,  21,  216, 239, 231, 46,
    53,  236, 162, 109, 41,  118, 72,  69,  0,   181, 88,  216, 20,  152, 203, 148, 60,  160, 29,  135, 16,  70,  230,
    182, 165, 176, 26,  86,  37,  55,  70,  243, 175, 46,  100, 203, 223, 237, 25,  43,  168, 68,  160, 2,   145, 156,
    16,  56,  128, 16,  29,  8,   3,   61,  242, 34,  196, 189, 41,  148, 19,  33,  190, 40,  228, 212, 104, 222, 228,
    220, 245, 100, 119, 223, 217, 22,  44,  109, 16,  1,   238, 12,  96,  121, 37,  130, 177, 47,  89,  201, 73,  140,
    140, 249, 98,  16,  32,  57,  19,  196, 34,  92,  62,  63,  118, 108, 226, 74,  224, 119, 137, 8,   144, 86,  23,
    11,  46,  44,  3,   98,  180, 12,  231, 252, 57,  104, 208, 241, 120, 104, 76,  226, 188, 56,  224, 212, 63,  115,
    129, 115, 160, 212, 133, 224, 249, 222, 34,  124, 233, 34,  210, 107, 78,  99,  35,  247, 71,  92,  14,  227, 28,
    203, 184, 143, 69,  5,   200, 77,  100, 126, 207, 198, 75,  201, 98,  129, 28,  135, 226, 23,  25,  147, 198, 235,
    21,  238, 12,  228, 232, 0,   230, 168, 145, 94,  12,  8,   220, 76,  142, 44,  106, 134, 88,  6,   185, 227, 152,
    195, 16,  95,  48,  242, 81,  180, 2,   36,  3,   141, 34,  127, 19,  60,  142, 64,  196, 151, 230, 152, 184, 72,
    76,  134, 132, 118, 220, 135, 17,  16,  224, 56,  149, 159, 43,  161, 1,   170, 147, 37,  179, 202, 184, 133, 153,
    200, 247, 253, 152, 76,  167, 47,  134, 130, 10,  240, 54,  136, 195, 228, 32,  116, 91,  131, 52,  231, 52,  0,
    28,  137, 16,  75,  44,  66,  4,   136, 208, 217, 172, 32,  130, 2,   108, 81,  2,   147, 129, 7,   228, 26,  35,
    33,  57,  205, 219, 0,   72,  205, 112, 41,  11,  58,  246, 57,  47,  224, 117, 60,  120, 2,   242, 68,  254, 226,
    66,  198, 201, 188, 239, 230, 34,  135, 164, 204, 245, 33,  130, 132, 86,  107, 80,  20,  34,  128, 90,  91,  216,
    22,  147, 39,  151, 85,  253, 42,  8,   41,  114, 106, 148, 203, 114, 47,  121, 0,   157, 249, 44,  130, 197, 136,
    113, 224, 65,  4,   232, 71,  177, 44,  136, 203, 139, 117, 37,  231, 115, 47,  126, 62,  167, 62,  207, 131, 175,
    38,  25,  190, 159, 193, 174, 23,  19,  88,  64,  245, 186, 219, 7,   120, 1,   24,  137, 201, 210, 35,  201, 137,
    71,  175, 79,  200, 177, 206, 113, 139, 104, 14,  158, 54,  60,  146, 31,  214, 188, 132, 197, 118, 130, 5,   108,
    221, 184, 246, 43,  83,  237, 136, 33,  130, 45,  27,  16,  20,  16,  162, 11,  179, 143, 11,  49,  53,  218, 57,
    94,  55,  70,  8,   107, 96,  1,   248, 75,  120, 219, 166, 138, 246, 48,  249, 130, 19,  225, 229, 108, 92,  231,
    22,  136, 162, 245, 56,  86,  82,  24,  39,  57,  239, 92,  7,   57,  3,   132, 23,  183, 110, 108, 222, 246, 64,
    69,  59,  72,  11,  45,  235, 252, 236, 130, 10,  89,  144, 28,  253, 20,  37,  101, 98,  201, 208, 37,  115, 138,
    193, 9,   0,   32,  162, 245, 241, 154, 250, 187, 87,  39,  70,  121, 113, 38,  18,  115, 21,  96,  211, 109, 33,
    179, 10,  128, 65,  136, 133, 208, 226, 48,  138, 110, 129, 15,  108, 199, 39,  59,  54,  87,  191, 80,  123, 111,
    243, 170, 88,  116, 38,  195, 79,  159, 141, 100, 236, 137, 213, 68,  136, 136, 227, 188, 10,  17,  114, 244, 136,
    125, 17,  226, 132, 53,  21,  8,   48,  60,  189, 121, 67,  251, 7,   207, 110, 169, 126, 234, 254, 245, 237, 153,
    12,  9,   32,  187, 142, 158, 132, 100, 140, 148, 69,  80,  53,  52,  134, 229, 96,  116, 191, 16,  83,  131, 31,
    86,  130, 184, 16,  69,  94,  140, 66,  224, 47,  225, 143, 15,  158, 235, 56,  49,  121, 185, 206, 255, 210, 105,
    223, 1,   1,   107, 245, 195, 143, 73,  193, 139, 202, 88,  197, 208, 227, 1,   58,  159, 123, 200, 241, 46,  90,
    1,   31,  149, 101, 101, 163, 111, 63,  121, 95,  253, 238, 199, 146, 219, 215, 175, 138, 143, 90,  53,  204, 220,
    54,  120, 68,  108, 42,  2,   38,  149, 144, 245, 124, 220, 148, 0,   195, 35,  85,  107, 190, 196, 249, 120, 102,
    203, 61,  123, 248, 124, 224, 92,  176, 0,   19,  33,  135, 147, 69,  40,  33,  98,  229, 23,  132, 68,  220, 212,
    22,  20,  3,   190, 223, 239, 253, 245, 116, 219, 143, 163, 233, 70,  219, 10,  247, 93,  192, 91,  214, 14,  166,
    85,  4,   231, 165, 243, 249, 37,  110, 65,  49,  172, 139, 70,  103, 118, 61,  90,  181, 179, 133, 94,  219, 77,
    21,  119, 246, 242, 193, 116, 149, 80,  50,  37,  247, 95,  205, 48,  150, 93,  129, 48,  240, 79,  172, 125, 71,
    199, 91,  206, 211, 31,  31,  168, 132, 29,  78,  3,   68,  240, 182, 80,  227, 87,  160, 100, 2,   0,   108, 203,
    183, 71,  39,  154, 14,  12,  77,  191, 54,  151, 201, 150, 99,  113, 108, 137, 61,  189, 137, 232, 90,  41,  1,
    6,   188, 182, 159, 29,  30,  111, 235, 59,  51,  219, 96,  223, 7,   88,  0,   174, 144, 128, 101, 159, 129, 27,
    1,   175, 237, 27,  117, 53,  219, 91,  159, 168, 169, 175, 90,  179, 122, 64,  222, 4,   33,  223, 112, 199, 109,
    163, 58,  237, 214, 1,   231, 227, 165, 174, 193, 212, 142, 189, 71,  114, 165, 248, 207, 90,  9,   17,  137, 252,
    11,  253, 61,  207, 126, 237, 116, 30,  132, 0,   0,   0,   0,   73,  69,  78,  68,  174, 66,  96,  130};

class AnimatedLogo_AnimatedVisual
    : public winrt::implements<AnimatedLogo_AnimatedVisual, winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual2,
                               winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual, IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{nullptr};
    static constexpr int64_t c_durationTicks{30000000L};
    Compositor const _c{nullptr};
    ExpressionAnimation const _reusableExpressionAnimation{nullptr};
    LoadedImageSurface const _image_0{nullptr};
    LoadedImageSurface const _image_1{nullptr};
    LoadedImageSurface const _image_2{nullptr};
    AnimationController _animationController_0{nullptr};
    CompositionColorBrush
        _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0{nullptr};
    CompositionColorBrush
        _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1{nullptr};
    CompositionColorBrush
        _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2{nullptr};
    CompositionColorBrush _colorBrush_White{nullptr};
    CompositionPathGeometry _pathGeometry_22{nullptr};
    CompositionPathGeometry _pathGeometry_23{nullptr};
    ContainerVisual _root{nullptr};
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{nullptr};
    SpriteVisual _spriteVisual_0{nullptr};
    SpriteVisual _spriteVisual_1{nullptr};
    SpriteVisual _spriteVisual_2{nullptr};
    StepEasingFunction _holdThenStepEasingFunction{nullptr};

    void BindProperty(CompositionObject target, winrt::hstring animatedPropertyName, winrt::hstring expression,
                      winrt::hstring referenceParameterName, CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue,
                                                        CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateColorKeyFrameAnimation();
        result.Duration(TimeSpan{c_durationTicks});
        result.InterpolationColorSpace(CompositionColorSpace::Rgb);
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation(float initialProgress, float3 initialValue,
                                                            CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateVector3KeyFrameAnimation();
        result.Duration(TimeSpan{c_durationTicks});
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix,
                                             CompositionBrush fillBrush)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        result.FillBrush(fillBrush);
        return result;
    }

    AnimationController AnimationController_0()
    {
        if (_animationController_0 != nullptr)
        {
            return _animationController_0;
        }
        const auto result = _animationController_0 = _c.CreateAnimationController();
        result.Pause();
        BindProperty(_animationController_0, L"Progress", L"_.Progress", L"_", _root);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_00()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({0.0F, 42.3919983F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({0.0F, 0.671999991F});
        sink->AddLine({6.15999985F, 0.671999991F});
        sink->AddBezier({{11.3866663F, 7.91466665F}, {16.6133327F, 15.1573334F}, {21.8400002F, 22.3999996F}});
        sink->AddLine({18.7600002F, 22.3999996F});
        sink->AddBezier({{23.8933334F, 15.1573334F}, {29.0266666F, 7.91466665F}, {34.1599998F, 0.671999991F}});
        sink->AddLine({40.3199997F, 0.671999991F});
        sink->AddLine({40.3199997F, 42.3919983F});
        sink->AddLine({33.7680016F, 42.3919983F});
        sink->AddLine({33.7680016F, 8.45600033F});
        sink->AddLine({36.2319984F, 9.12800026F});
        sink->AddLine({20.4960003F, 30.632F});
        sink->AddLine({19.8239994F, 30.632F});
        sink->AddLine({4.42399979F, 9.12800026F});
        sink->AddLine({6.6079998F, 8.45600033F});
        sink->AddLine({6.6079998F, 42.3919983F});
        sink->AddLine({0.0F, 42.3919983F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_01()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({57.401001F, 43.0639992F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{55.3479996F, 43.0639992F}, {53.5369987F, 42.709301F}, {51.9690018F, 42.0F}});
        sink->AddBezier({{50.4379997F, 41.2532997F}, {49.2439995F, 40.2453003F}, {48.3849983F, 38.9760017F}});
        sink->AddBezier({{47.526001F, 37.6693001F}, {47.0970001F, 36.1386986F}, {47.0970001F, 34.3839989F}});
        sink->AddBezier({{47.0970001F, 32.7412987F}, {47.4519997F, 31.2667007F}, {48.1609993F, 29.9599991F}});
        sink->AddBezier({{48.9080009F, 28.6532993F}, {50.0460014F, 27.552F}, {51.5769997F, 26.6560001F}});
        sink->AddBezier({{53.1080017F, 25.7600002F}, {55.0299988F, 25.1252995F}, {57.3450012F, 24.7520008F}});
        sink->AddLine({67.8730011F, 23.0160007F});
        sink->AddLine({67.8730011F, 28.0F});
        sink->AddBezier({{64.7743301F, 28.5413342F}, {61.6756668F, 29.0826664F}, {58.5769997F, 29.6240005F}});
        sink->AddBezier({{56.8969994F, 29.9227009F}, {55.6650009F, 30.4640007F}, {54.8810005F, 31.2479992F}});
        sink->AddBezier({{54.0970001F, 31.9946995F}, {53.7050018F, 32.9653015F}, {53.7050018F, 34.1599998F}});
        sink->AddBezier({{53.7050018F, 35.3172989F}, {54.1339989F, 36.2692986F}, {54.993F, 37.0159988F}});
        sink->AddBezier({{55.8889999F, 37.7252998F}, {57.0279999F, 38.0800018F}, {58.4090004F, 38.0800018F}});
        sink->AddBezier({{60.1259995F, 38.0800018F}, {61.6199989F, 37.7066994F}, {62.8889999F, 36.9599991F}});
        sink->AddBezier({{64.1959991F, 36.2132988F}, {65.2040024F, 35.223999F}, {65.913002F, 33.9920006F}});
        sink->AddBezier({{66.6220016F, 32.7226982F}, {66.9769974F, 31.3227005F}, {66.9769974F, 29.7919998F}});
        sink->AddLine({66.9769974F, 22.0079994F});
        sink->AddBezier({{66.9769974F, 20.5146999F}, {66.4169998F, 19.3013F}, {65.2969971F, 18.368F}});
        sink->AddBezier({{64.2139969F, 17.3973007F}, {62.7579994F, 16.9120007F}, {60.9290009F, 16.9120007F}});
        sink->AddBezier({{59.2490005F, 16.9120007F}, {57.7739983F, 17.3600006F}, {56.5050011F, 18.2560005F}});
        sink->AddBezier({{55.2729988F, 19.1147003F}, {54.3580017F, 20.2346992F}, {53.7610016F, 21.6159992F}});
        sink->AddLine({48.4970016F, 18.9839993F});
        sink->AddBezier({{49.0569992F, 17.4906998F}, {49.9720001F, 16.184F}, {51.2410011F, 15.0640001F}});
        sink->AddBezier({{52.5099983F, 13.9067001F}, {53.9850006F, 13.0107002F}, {55.6650009F, 12.3760004F}});
        sink->AddBezier({{57.382F, 11.7412996F}, {59.1930008F, 11.4239998F}, {61.0970001F, 11.4239998F}});
        sink->AddBezier({{63.4860001F, 11.4239998F}, {65.5960007F, 11.8719997F}, {67.4250031F, 12.7679996F}});
        sink->AddBezier({{69.2919998F, 13.6639996F}, {70.7289963F, 14.9146996F}, {71.7369995F, 16.5200005F}});
        sink->AddBezier({{72.7819977F, 18.0879993F}, {73.3050003F, 19.9172993F}, {73.3050003F, 22.0079994F}});
        sink->AddLine({73.3050003F, 42.3919983F});
        sink->AddLine({67.2570038F, 42.3919983F});
        sink->AddLine({67.2570038F, 36.9039993F});
        sink->AddLine({68.5449982F, 37.0719986F});
        sink->AddBezier({{67.8359985F, 38.3040009F}, {66.9209976F, 39.368F}, {65.8010025F, 40.2639999F}});
        sink->AddBezier({{64.7180023F, 41.1599998F}, {63.4679985F, 41.8507004F}, {62.0489998F, 42.3359985F}});
        sink->AddBezier({{60.6679993F, 42.8213005F}, {59.118F, 43.0639992F}, {57.401001F, 43.0639992F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_02()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({94.7040024F, 43.0639992F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{91.7919998F, 43.0639992F}, {89.1790009F, 42.3732986F}, {86.8639984F, 40.9920006F}});
        sink->AddBezier({{84.586998F, 39.5732994F}, {82.776001F, 37.6693001F}, {81.4319992F, 35.2799988F}});
        sink->AddBezier({{80.125F, 32.8907013F}, {79.4720001F, 30.2026997F}, {79.4720001F, 27.2159996F}});
        sink->AddBezier({{79.4720001F, 24.2292995F}, {80.1439972F, 21.5412998F}, {81.487999F, 19.1520004F}});
        sink->AddBezier({{82.8320007F, 16.7626991F}, {84.6429977F, 14.8773003F}, {86.9199982F, 13.4960003F}});
        sink->AddBezier({{89.1969986F, 12.1147003F}, {91.7730026F, 11.4239998F}, {94.6480026F, 11.4239998F}});
        sink->AddBezier({{97.0749969F, 11.4239998F}, {99.2210007F, 11.9092999F}, {101.087997F, 12.8800001F}});
        sink->AddBezier({{102.955002F, 13.8507004F}, {104.429001F, 15.1947002F}, {105.512001F, 16.9120007F}});
        sink->AddLine({104.559998F, 18.368F});
        sink->AddLine({104.559998F, 0.0F});
        sink->AddLine({110.832001F, 0.0F});
        sink->AddLine({110.832001F, 42.3919983F});
        sink->AddLine({104.839996F, 42.3919983F});
        sink->AddLine({104.839996F, 36.2319984F});
        sink->AddLine({105.568001F, 37.4080009F});
        sink->AddBezier({{104.523003F, 39.2373009F}, {103.028999F, 40.6372986F}, {101.087997F, 41.6080017F}});
        sink->AddBezier({{99.1470032F, 42.578701F}, {97.0189972F, 43.0639992F}, {94.7040024F, 43.0639992F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_03()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({95.3199997F, 37.1839981F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{97.0749969F, 37.1839981F}, {98.6429977F, 36.7546997F}, {100.024002F, 35.8959999F}});
        sink->AddBezier({{101.443001F, 35.0373001F}, {102.543999F, 33.8613014F}, {103.328003F, 32.368F}});
        sink->AddBezier({{104.149002F, 30.8372993F}, {104.559998F, 29.1200008F}, {104.559998F, 27.2159996F}});
        sink->AddBezier({{104.559998F, 25.3120003F}, {104.149002F, 23.6133003F}, {103.328003F, 22.1200008F}});
        sink->AddBezier({{102.543999F, 20.6266994F}, {101.443001F, 19.4507008F}, {100.024002F, 18.5919991F}});
        sink->AddBezier({{98.6429977F, 17.7332993F}, {97.0749969F, 17.3040009F}, {95.3199997F, 17.3040009F}});
        sink->AddBezier({{93.5650024F, 17.3040009F}, {91.9789963F, 17.7332993F}, {90.5599976F, 18.5919991F}});
        sink->AddBezier({{89.1409988F, 19.4507008F}, {88.0400009F, 20.6266994F}, {87.2559967F, 22.1200008F}});
        sink->AddBezier({{86.4720001F, 23.6133003F}, {86.0800018F, 25.3120003F}, {86.0800018F, 27.2159996F}});
        sink->AddBezier({{86.0800018F, 29.1200008F}, {86.4720001F, 30.8372993F}, {87.2559967F, 32.368F}});
        sink->AddBezier({{88.0400009F, 33.8613014F}, {89.1230011F, 35.0373001F}, {90.5039978F, 35.8959999F}});
        sink->AddBezier({{91.9229965F, 36.7546997F}, {93.5279999F, 37.1839981F}, {95.3199997F, 37.1839981F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_04()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({132.444F, 43.0639992F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{129.419998F, 43.0639992F}, {126.732002F, 42.3732986F}, {124.379997F, 40.9920006F}});
        sink->AddBezier({{122.065002F, 39.5732994F}, {120.253998F, 37.6693001F}, {118.947998F, 35.2799988F}});
        sink->AddBezier({{117.640999F, 32.8532982F}, {116.987999F, 30.1466999F}, {116.987999F, 27.1599998F}});
        sink->AddBezier({{116.987999F, 24.0986996F}, {117.640999F, 21.3920002F}, {118.947998F, 19.0400009F}});
        sink->AddBezier({{120.292F, 16.6879997F}, {122.084F, 14.8400002F}, {124.323997F, 13.4960003F}});
        sink->AddBezier({{126.564003F, 12.1147003F}, {129.102005F, 11.4239998F}, {131.940002F, 11.4239998F}});
        sink->AddBezier({{134.216995F, 11.4239998F}, {136.251999F, 11.816F}, {138.044006F, 12.6000004F}});
        sink->AddBezier({{139.835999F, 13.3839998F}, {141.348007F, 14.4666996F}, {142.580002F, 15.8479996F}});
        sink->AddBezier({{143.811996F, 17.1919994F}, {144.744995F, 18.7413006F}, {145.380005F, 20.4960003F}});
        sink->AddBezier({{146.052002F, 22.2507F}, {146.388F, 24.1173F}, {146.388F, 26.0960007F}});
        sink->AddBezier({{146.388F, 26.5813007F}, {146.369003F, 27.0853004F}, {146.332001F, 27.6079998F}});
        sink->AddBezier({{146.294006F, 28.1306992F}, {146.220001F, 28.6159992F}, {146.108002F, 29.0639992F}});
        sink->AddLine({121.972F, 29.0639992F});
        sink->AddLine({121.972F, 24.0240002F});
        sink->AddLine({142.524002F, 24.0240002F});
        sink->AddLine({139.5F, 26.3199997F});
        sink->AddBezier({{139.873001F, 24.4906998F}, {139.742004F, 22.8666992F}, {139.108002F, 21.448F}});
        sink->AddBezier({{138.509995F, 19.9920006F}, {137.576996F, 18.8533001F}, {136.307999F, 18.0319996F}});
        sink->AddBezier({{135.076004F, 17.1732998F}, {133.619995F, 16.7439995F}, {131.940002F, 16.7439995F}});
        sink->AddBezier({{130.259995F, 16.7439995F}, {128.766006F, 17.1732998F}, {127.459999F, 18.0319996F}});
        sink->AddBezier({{126.153F, 18.8533001F}, {125.144997F, 20.0480003F}, {124.435997F, 21.6159992F}});
        sink->AddBezier({{123.725998F, 23.1466999F}, {123.445999F, 25.0132999F}, {123.596001F, 27.2159996F}});
        sink->AddBezier({{123.408997F, 29.2693005F}, {123.689003F, 31.0613003F}, {124.435997F, 32.5919991F}});
        sink->AddBezier({{125.220001F, 34.1226997F}, {126.302002F, 35.3172989F}, {127.683998F, 36.1759987F}});
        sink->AddBezier({{129.102005F, 37.0346985F}, {130.707993F, 37.4640007F}, {132.5F, 37.4640007F}});
        sink->AddBezier({{134.328995F, 37.4640007F}, {135.878006F, 37.053299F}, {137.147995F, 36.2319984F}});
        sink->AddBezier({{138.453995F, 35.4107018F}, {139.481003F, 34.3466988F}, {140.227997F, 33.0400009F}});
        sink->AddLine({145.380005F, 35.5600014F});
        sink->AddBezier({{144.781998F, 36.9786987F}, {143.848999F, 38.2667007F}, {142.580002F, 39.4239998F}});
        sink->AddBezier({{141.348007F, 40.5439987F}, {139.854004F, 41.4399986F}, {138.100006F, 42.1119995F}});
        sink->AddBezier({{136.382004F, 42.7467003F}, {134.496994F, 43.0639992F}, {132.444F, 43.0639992F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_05()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({169.688004F, 42.3919983F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{166.216003F, 32.293335F}, {162.744003F, 22.1946659F}, {159.272003F, 12.0959997F}});
        sink->AddLine({165.992004F, 12.0959997F});
        sink->AddLine({173.944F, 36.2319984F});
        sink->AddLine({171.591995F, 36.2319984F});
        sink->AddLine({179.712006F, 12.0959997F});
        sink->AddLine({185.479996F, 12.0959997F});
        sink->AddLine({193.544006F, 36.2319984F});
        sink->AddLine({191.192001F, 36.2319984F});
        sink->AddBezier({{193.861328F, 28.1866665F}, {196.53067F, 20.1413326F}, {199.199997F, 12.0959997F}});
        sink->AddLine({205.919998F, 12.0959997F});
        sink->AddLine({195.447998F, 42.3919983F});
        sink->AddLine({189.735992F, 42.3919983F});
        sink->AddLine({181.559998F, 17.6959991F});
        sink->AddLine({183.632004F, 17.6959991F});
        sink->AddLine({175.455994F, 42.3919983F});
        sink->AddLine({169.688004F, 42.3919983F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_06()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({210.259003F, 42.3919983F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({210.259003F, 12.0959997F});
        sink->AddLine({216.587006F, 12.0959997F});
        sink->AddLine({216.587006F, 42.3919983F});
        sink->AddLine({210.259003F, 42.3919983F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_07()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({210.259003F, 7.95200014F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({210.259003F, 0.671999991F});
        sink->AddLine({216.587006F, 0.671999991F});
        sink->AddLine({216.587006F, 7.95200014F});
        sink->AddLine({210.259003F, 7.95200014F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_08()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({237.089005F, 42.7280006F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{233.916F, 42.7280006F}, {231.451996F, 41.8320007F}, {229.697006F, 40.0400009F}});
        sink->AddBezier({{227.942993F, 38.2480011F}, {227.065002F, 35.7280006F}, {227.065002F, 32.4799995F}});
        sink->AddLine({227.065002F, 17.8080006F});
        sink->AddLine({221.744995F, 17.8080006F});
        sink->AddLine({221.744995F, 12.0959997F});
        sink->AddLine({222.585007F, 12.0959997F});
        sink->AddBezier({{224.003998F, 12.0959997F}, {225.104996F, 11.6852999F}, {225.889008F, 10.8640003F}});
        sink->AddBezier({{226.673004F, 10.0426998F}, {227.065002F, 8.92269993F}, {227.065002F, 7.50400019F}});
        sink->AddLine({227.065002F, 5.15199995F});
        sink->AddLine({233.393005F, 5.15199995F});
        sink->AddLine({233.393005F, 12.0959997F});
        sink->AddLine({240.281006F, 12.0959997F});
        sink->AddLine({240.281006F, 17.8080006F});
        sink->AddLine({233.393005F, 17.8080006F});
        sink->AddLine({233.393005F, 32.2000008F});
        sink->AddBezier({{233.393005F, 33.2453003F}, {233.561005F, 34.1413002F}, {233.897003F, 34.8880005F}});
        sink->AddBezier({{234.233002F, 35.5973015F}, {234.774994F, 36.157299F}, {235.520996F, 36.5680008F}});
        sink->AddBezier({{236.268005F, 36.9412994F}, {237.238998F, 37.1279984F}, {238.432999F, 37.1279984F}});
        sink->AddBezier({{238.731995F, 37.1279984F}, {239.067993F, 37.1092987F}, {239.440994F, 37.0719986F}});
        sink->AddBezier({{239.815002F, 37.0346985F}, {240.169006F, 36.9972992F}, {240.505005F, 36.9599991F}});
        sink->AddLine({240.505005F, 42.3919983F});
        sink->AddBezier({{239.983002F, 42.4667015F}, {239.404007F, 42.5413017F}, {238.768997F, 42.6160011F}});
        sink->AddBezier({{238.134995F, 42.6907005F}, {237.574997F, 42.7280006F}, {237.089005F, 42.7280006F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_09()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({246.681F, 42.3919983F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({246.681F, 0.0F});
        sink->AddLine({253.009003F, 0.0F});
        sink->AddLine({253.009003F, 18.0319996F});
        sink->AddLine({252.001007F, 17.2479992F});
        sink->AddBezier({{252.746994F, 15.3439999F}, {253.942001F, 13.9067001F}, {255.585007F, 12.9359999F}});
        sink->AddBezier({{257.22699F, 11.9280005F}, {259.131012F, 11.4239998F}, {261.296997F, 11.4239998F}});
        sink->AddBezier({{263.536987F, 11.4239998F}, {265.515015F, 11.9092999F}, {267.233002F, 12.8800001F}});
        sink->AddBezier({{268.950012F, 13.8507004F}, {270.294006F, 15.1947002F}, {271.265015F, 16.9120007F}});
        sink->AddBezier({{272.234985F, 18.6292992F}, {272.721008F, 20.5893002F}, {272.721008F, 22.7919998F}});
        sink->AddLine({272.721008F, 42.3919983F});
        sink->AddLine({266.449005F, 42.3919983F});
        sink->AddLine({266.449005F, 24.5279999F});
        sink->AddBezier({{266.449005F, 22.9972992F}, {266.149994F, 21.7092991F}, {265.553009F, 20.6639996F}});
        sink->AddBezier({{264.993011F, 19.5813007F}, {264.209015F, 18.7600002F}, {263.200989F, 18.2000008F}});
        sink->AddBezier({{262.192993F, 17.6026993F}, {261.035004F, 17.3040009F}, {259.729004F, 17.3040009F}});
        sink->AddBezier({{258.459015F, 17.3040009F}, {257.302002F, 17.6026993F}, {256.256989F, 18.2000008F}});
        sink->AddBezier({{255.248993F, 18.7600002F}, {254.445999F, 19.5813007F}, {253.848999F, 20.6639996F}});
        sink->AddBezier({{253.289001F, 21.7467003F}, {253.009003F, 23.0347004F}, {253.009003F, 24.5279999F}});
        sink->AddLine({253.009003F, 42.3919983F});
        sink->AddLine({246.681F, 42.3919983F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_10()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({0.0F, 42.3919983F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({0.0F, 0.671999991F});
        sink->AddLine({6.6079998F, 0.671999991F});
        sink->AddLine({6.6079998F, 36.512001F});
        sink->AddLine({24.6399994F, 36.512001F});
        sink->AddLine({24.6399994F, 42.3919983F});
        sink->AddLine({0.0F, 42.3919983F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_11()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({44.1879997F, 43.0639992F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{41.276001F, 43.0639992F}, {38.605999F, 42.3732986F}, {36.1800003F, 40.9920006F}});
        sink->AddBezier({{33.7900009F, 39.6106987F}, {31.8859997F, 37.7252998F}, {30.4680004F, 35.3359985F}});
        sink->AddBezier({{29.0489998F, 32.946701F}, {28.3400002F, 30.2399998F}, {28.3400002F, 27.2159996F}});
        sink->AddBezier({{28.3400002F, 24.1546993F}, {29.0489998F, 21.448F}, {30.4680004F, 19.0960007F}});
        sink->AddBezier({{31.8859997F, 16.7066994F}, {33.7900009F, 14.8400002F}, {36.1800003F, 13.4960003F}});
        sink->AddBezier({{38.5690002F, 12.1147003F}, {41.237999F, 11.4239998F}, {44.1879997F, 11.4239998F}});
        sink->AddBezier({{47.1739998F, 11.4239998F}, {49.8440018F, 12.1147003F}, {52.1959991F, 13.4960003F}});
        sink->AddBezier({{54.5849991F, 14.8400002F}, {56.4700012F, 16.7066994F}, {57.8520012F, 19.0960007F}});
        sink->AddBezier({{59.2700005F, 21.448F}, {59.9799995F, 24.1546993F}, {59.9799995F, 27.2159996F}});
        sink->AddBezier({{59.9799995F, 30.2772999F}, {59.2700005F, 33.0027008F}, {57.8520012F, 35.3919983F}});
        sink->AddBezier({{56.4329987F, 37.7812996F}, {54.5289993F, 39.6666985F}, {52.1399994F, 41.0480003F}});
        sink->AddBezier({{49.75F, 42.3919983F}, {47.0999985F, 43.0639992F}, {44.1879997F, 43.0639992F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_12()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({44.1879997F, 37.1839981F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{45.9799995F, 37.1839981F}, {47.5660019F, 36.7546997F}, {48.9480019F, 35.8959999F}});
        sink->AddBezier({{50.3289986F, 35.0373001F}, {51.4119987F, 33.8613014F}, {52.1959991F, 32.368F}});
        sink->AddBezier({{53.0169983F, 30.8372993F}, {53.4280014F, 29.1200008F}, {53.4280014F, 27.2159996F}});
        sink->AddBezier({{53.4280014F, 25.3120003F}, {53.0169983F, 23.6133003F}, {52.1959991F, 22.1200008F}});
        sink->AddBezier({{51.4119987F, 20.6266994F}, {50.3289986F, 19.4507008F}, {48.9480019F, 18.5919991F}});
        sink->AddBezier({{47.5660019F, 17.7332993F}, {45.9799995F, 17.3040009F}, {44.1879997F, 17.3040009F}});
        sink->AddBezier({{42.4329987F, 17.3040009F}, {40.8460007F, 17.7332993F}, {39.4280014F, 18.5919991F}});
        sink->AddBezier({{38.0460014F, 19.4507008F}, {36.9449997F, 20.6266994F}, {36.1240005F, 22.1200008F}});
        sink->AddBezier({{35.3400002F, 23.6133003F}, {34.9480019F, 25.3120003F}, {34.9480019F, 27.2159996F}});
        sink->AddBezier({{34.9480019F, 29.1200008F}, {35.3400002F, 30.8372993F}, {36.1240005F, 32.368F}});
        sink->AddBezier({{36.9449997F, 33.8613014F}, {38.0460014F, 35.0373001F}, {39.4280014F, 35.8959999F}});
        sink->AddBezier({{40.8460007F, 36.7546997F}, {42.4329987F, 37.1839981F}, {44.1879997F, 37.1839981F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_13()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({78.7149963F, 42.7280006F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{75.5410004F, 42.7280006F}, {73.0770035F, 41.8320007F}, {71.322998F, 40.0400009F}});
        sink->AddBezier({{69.5680008F, 38.2480011F}, {68.6910019F, 35.7280006F}, {68.6910019F, 32.4799995F}});
        sink->AddLine({68.6910019F, 17.8080006F});
        sink->AddLine({63.3709984F, 17.8080006F});
        sink->AddLine({63.3709984F, 12.0959997F});
        sink->AddLine({64.2109985F, 12.0959997F});
        sink->AddBezier({{65.6289978F, 12.0959997F}, {66.7310028F, 11.6852999F}, {67.5149994F, 10.8640003F}});
        sink->AddBezier({{68.2990036F, 10.0426998F}, {68.6910019F, 8.92269993F}, {68.6910019F, 7.50400019F}});
        sink->AddLine({68.6910019F, 5.15199995F});
        sink->AddLine({75.0189972F, 5.15199995F});
        sink->AddLine({75.0189972F, 12.0959997F});
        sink->AddLine({81.9069977F, 12.0959997F});
        sink->AddLine({81.9069977F, 17.8080006F});
        sink->AddLine({75.0189972F, 17.8080006F});
        sink->AddLine({75.0189972F, 32.2000008F});
        sink->AddBezier({{75.0189972F, 33.2453003F}, {75.1869965F, 34.1413002F}, {75.5230026F, 34.8880005F}});
        sink->AddBezier({{75.8590012F, 35.5973015F}, {76.4000015F, 36.157299F}, {77.1470032F, 36.5680008F}});
        sink->AddBezier({{77.8929977F, 36.9412994F}, {78.8639984F, 37.1279984F}, {80.0589981F, 37.1279984F}});
        sink->AddBezier({{80.3570023F, 37.1279984F}, {80.6930008F, 37.1092987F}, {81.0670013F, 37.0719986F}});
        sink->AddBezier({{81.4400024F, 37.0346985F}, {81.7949982F, 36.9972992F}, {82.1309967F, 36.9599991F}});
        sink->AddLine({82.1309967F, 42.3919983F});
        sink->AddBezier({{81.6080017F, 42.4667015F}, {81.0289993F, 42.5413017F}, {80.3949966F, 42.6160011F}});
        sink->AddBezier({{79.7600021F, 42.6907005F}, {79.1999969F, 42.7280006F}, {78.7149963F, 42.7280006F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_14()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({101.410004F, 42.7280006F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{98.2369995F, 42.7280006F}, {95.7730026F, 41.8320007F}, {94.0179977F, 40.0400009F}});
        sink->AddBezier({{92.2630005F, 38.2480011F}, {91.3860016F, 35.7280006F}, {91.3860016F, 32.4799995F}});
        sink->AddLine({91.3860016F, 17.8080006F});
        sink->AddLine({86.0660019F, 17.8080006F});
        sink->AddLine({86.0660019F, 12.0959997F});
        sink->AddLine({86.9059982F, 12.0959997F});
        sink->AddBezier({{88.3249969F, 12.0959997F}, {89.4260025F, 11.6852999F}, {90.2099991F, 10.8640003F}});
        sink->AddBezier({{90.9940033F, 10.0426998F}, {91.3860016F, 8.92269993F}, {91.3860016F, 7.50400019F}});
        sink->AddLine({91.3860016F, 5.15199995F});
        sink->AddLine({97.7139969F, 5.15199995F});
        sink->AddLine({97.7139969F, 12.0959997F});
        sink->AddLine({104.601997F, 12.0959997F});
        sink->AddLine({104.601997F, 17.8080006F});
        sink->AddLine({97.7139969F, 17.8080006F});
        sink->AddLine({97.7139969F, 32.2000008F});
        sink->AddBezier({{97.7139969F, 33.2453003F}, {97.8820038F, 34.1413002F}, {98.2180023F, 34.8880005F}});
        sink->AddBezier({{98.5540009F, 35.5973015F}, {99.0950012F, 36.157299F}, {99.8420029F, 36.5680008F}});
        sink->AddBezier({{100.588997F, 36.9412994F}, {101.558998F, 37.1279984F}, {102.753998F, 37.1279984F}});
        sink->AddBezier({{103.053001F, 37.1279984F}, {103.389F, 37.1092987F}, {103.762001F, 37.0719986F}});
        sink->AddBezier({{104.135002F, 37.0346985F}, {104.489998F, 36.9972992F}, {104.825996F, 36.9599991F}});
        sink->AddLine({104.825996F, 42.3919983F});
        sink->AddBezier({{104.303001F, 42.4667015F}, {103.724998F, 42.5413017F}, {103.089996F, 42.6160011F}});
        sink->AddBezier({{102.455002F, 42.6907005F}, {101.894997F, 42.7280006F}, {101.410004F, 42.7280006F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_15()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({111.000999F, 42.3919983F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({111.000999F, 12.0959997F});
        sink->AddLine({117.329002F, 12.0959997F});
        sink->AddLine({117.329002F, 42.3919983F});
        sink->AddLine({111.000999F, 42.3919983F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_16()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({111.000999F, 7.95200014F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({111.000999F, 0.671999991F});
        sink->AddLine({117.329002F, 0.671999991F});
        sink->AddLine({117.329002F, 7.95200014F});
        sink->AddLine({111.000999F, 7.95200014F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_17()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({138.951996F, 43.0639992F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{135.927994F, 43.0639992F}, {133.240005F, 42.3732986F}, {130.888F, 40.9920006F}});
        sink->AddBezier({{128.572998F, 39.5732994F}, {126.763F, 37.6693001F}, {125.456001F, 35.2799988F}});
        sink->AddBezier({{124.149002F, 32.8532982F}, {123.496002F, 30.1466999F}, {123.496002F, 27.1599998F}});
        sink->AddBezier({{123.496002F, 24.0986996F}, {124.149002F, 21.3920002F}, {125.456001F, 19.0400009F}});
        sink->AddBezier({{126.800003F, 16.6879997F}, {128.591995F, 14.8400002F}, {130.832001F, 13.4960003F}});
        sink->AddBezier({{133.072006F, 12.1147003F}, {135.610992F, 11.4239998F}, {138.447998F, 11.4239998F}});
        sink->AddBezier({{140.725006F, 11.4239998F}, {142.759995F, 11.816F}, {144.552002F, 12.6000004F}});
        sink->AddBezier({{146.343994F, 13.3839998F}, {147.856003F, 14.4666996F}, {149.087997F, 15.8479996F}});
        sink->AddBezier({{150.320007F, 17.1919994F}, {151.253006F, 18.7413006F}, {151.888F, 20.4960003F}});
        sink->AddBezier({{152.559998F, 22.2507F}, {152.895996F, 24.1173F}, {152.895996F, 26.0960007F}});
        sink->AddBezier({{152.895996F, 26.5813007F}, {152.876999F, 27.0853004F}, {152.839996F, 27.6079998F}});
        sink->AddBezier({{152.802994F, 28.1306992F}, {152.727997F, 28.6159992F}, {152.615997F, 29.0639992F}});
        sink->AddLine({128.479996F, 29.0639992F});
        sink->AddLine({128.479996F, 24.0240002F});
        sink->AddLine({149.031998F, 24.0240002F});
        sink->AddLine({146.007996F, 26.3199997F});
        sink->AddBezier({{146.380997F, 24.4906998F}, {146.251007F, 22.8666992F}, {145.615997F, 21.448F}});
        sink->AddBezier({{145.018997F, 19.9920006F}, {144.085007F, 18.8533001F}, {142.815994F, 18.0319996F}});
        sink->AddBezier({{141.584F, 17.1732998F}, {140.128006F, 16.7439995F}, {138.447998F, 16.7439995F}});
        sink->AddBezier({{136.768005F, 16.7439995F}, {135.274994F, 17.1732998F}, {133.968002F, 18.0319996F}});
        sink->AddBezier({{132.660995F, 18.8533001F}, {131.653F, 20.0480003F}, {130.944F, 21.6159992F}});
        sink->AddBezier({{130.235001F, 23.1466999F}, {129.955002F, 25.0132999F}, {130.104004F, 27.2159996F}});
        sink->AddBezier({{129.917007F, 29.2693005F}, {130.197006F, 31.0613003F}, {130.944F, 32.5919991F}});
        sink->AddBezier({{131.727997F, 34.1226997F}, {132.811005F, 35.3172989F}, {134.192001F, 36.1759987F}});
        sink->AddBezier({{135.610992F, 37.0346985F}, {137.216003F, 37.4640007F}, {139.007996F, 37.4640007F}});
        sink->AddBezier({{140.837006F, 37.4640007F}, {142.386993F, 37.053299F}, {143.656006F, 36.2319984F}});
        sink->AddBezier({{144.962997F, 35.4107018F}, {145.988998F, 34.3466988F}, {146.735992F, 33.0400009F}});
        sink->AddLine({151.888F, 35.5600014F});
        sink->AddBezier({{151.291F, 36.9786987F}, {150.356995F, 38.2667007F}, {149.087997F, 39.4239998F}});
        sink->AddBezier({{147.856003F, 40.5439987F}, {146.363007F, 41.4399986F}, {144.608002F, 42.1119995F}});
        sink->AddBezier({{142.891006F, 42.7467003F}, {141.005005F, 43.0639992F}, {138.951996F, 43.0639992F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_18()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({159.072006F, 42.3919983F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({159.072006F, 0.0F});
        sink->AddLine({165.399994F, 0.0F});
        sink->AddLine({165.399994F, 42.3919983F});
        sink->AddLine({159.072006F, 42.3919983F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_19()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({181.869995F, 43.0639992F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{179.817001F, 43.0639992F}, {178.005997F, 42.709301F}, {176.438004F, 42.0F}});
        sink->AddBezier({{174.908005F, 41.2532997F}, {173.712997F, 40.2453003F}, {172.854004F, 38.9760017F}});
        sink->AddBezier({{171.996002F, 37.6693001F}, {171.565994F, 36.1386986F}, {171.565994F, 34.3839989F}});
        sink->AddBezier({{171.565994F, 32.7412987F}, {171.921005F, 31.2667007F}, {172.630005F, 29.9599991F}});
        sink->AddBezier({{173.376999F, 28.6532993F}, {174.516006F, 27.552F}, {176.046005F, 26.6560001F}});
        sink->AddBezier({{177.576996F, 25.7600002F}, {179.5F, 25.1252995F}, {181.813995F, 24.7520008F}});
        sink->AddLine({192.341995F, 23.0160007F});
        sink->AddLine({192.341995F, 28.0F});
        sink->AddLine({183.046005F, 29.6240005F});
        sink->AddBezier({{181.365997F, 29.9227009F}, {180.134003F, 30.4640007F}, {179.350006F, 31.2479992F}});
        sink->AddBezier({{178.565994F, 31.9946995F}, {178.173996F, 32.9653015F}, {178.173996F, 34.1599998F}});
        sink->AddBezier({{178.173996F, 35.3172989F}, {178.604004F, 36.2692986F}, {179.462006F, 37.0159988F}});
        sink->AddBezier({{180.358002F, 37.7252998F}, {181.496994F, 38.0800018F}, {182.878006F, 38.0800018F}});
        sink->AddBezier({{184.595993F, 38.0800018F}, {186.089005F, 37.7066994F}, {187.358002F, 36.9599991F}});
        sink->AddBezier({{188.664993F, 36.2132988F}, {189.673004F, 35.223999F}, {190.382004F, 33.9920006F}});
        sink->AddBezier({{191.091995F, 32.7226982F}, {191.445999F, 31.3227005F}, {191.445999F, 29.7919998F}});
        sink->AddLine({191.445999F, 22.0079994F});
        sink->AddBezier({{191.445999F, 20.5146999F}, {190.886002F, 19.3013F}, {189.766006F, 18.368F}});
        sink->AddBezier({{188.684006F, 17.3973007F}, {187.227997F, 16.9120007F}, {185.397995F, 16.9120007F}});
        sink->AddBezier({{183.718002F, 16.9120007F}, {182.244003F, 17.3600006F}, {180.973999F, 18.2560005F}});
        sink->AddBezier({{179.742004F, 19.1147003F}, {178.828003F, 20.2346992F}, {178.229996F, 21.6159992F}});
        sink->AddBezier({{176.475327F, 20.7386665F}, {174.720673F, 19.8613338F}, {172.966003F, 18.9839993F}});
        sink->AddBezier({{173.526001F, 17.4906998F}, {174.440994F, 16.184F}, {175.710007F, 15.0640001F}});
        sink->AddBezier({{176.979996F, 13.9067001F}, {178.453995F, 13.0107002F}, {180.134003F, 12.3760004F}});
        sink->AddBezier({{181.852005F, 11.7412996F}, {183.662003F, 11.4239998F}, {185.565994F, 11.4239998F}});
        sink->AddBezier({{187.955994F, 11.4239998F}, {190.065002F, 11.8719997F}, {191.893997F, 12.7679996F}});
        sink->AddBezier({{193.761002F, 13.6639996F}, {195.197998F, 14.9146996F}, {196.205994F, 16.5200005F}});
        sink->AddBezier({{197.251999F, 18.0879993F}, {197.774002F, 19.9172993F}, {197.774002F, 22.0079994F}});
        sink->AddLine({197.774002F, 42.3919983F});
        sink->AddLine({191.725998F, 42.3919983F});
        sink->AddLine({191.725998F, 36.9039993F});
        sink->AddLine({193.014008F, 37.0719986F});
        sink->AddBezier({{192.304993F, 38.3040009F}, {191.389999F, 39.368F}, {190.270004F, 40.2639999F}});
        sink->AddBezier({{189.188004F, 41.1599998F}, {187.936996F, 41.8507004F}, {186.518005F, 42.3359985F}});
        sink->AddBezier({{185.136993F, 42.8213005F}, {183.587997F, 43.0639992F}, {181.869995F, 43.0639992F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_20()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({221.356995F, 43.0639992F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{219.005005F, 43.0639992F}, {216.858994F, 42.578701F}, {214.917007F, 41.6080017F}});
        sink->AddBezier({{213.013F, 40.6372986F}, {211.539001F, 39.2373009F}, {210.492996F, 37.4080009F}});
        sink->AddBezier({{210.735672F, 37.0159988F}, {210.978333F, 36.6240005F}, {211.220993F, 36.2319984F}});
        sink->AddLine({211.220993F, 42.3919983F});
        sink->AddLine({205.173004F, 42.3919983F});
        sink->AddLine({205.173004F, 0.0F});
        sink->AddLine({211.501007F, 0.0F});
        sink->AddLine({211.501007F, 18.368F});
        sink->AddLine({210.492996F, 16.9120007F});
        sink->AddBezier({{211.613007F, 15.1947002F}, {213.106995F, 13.8507004F}, {214.973007F, 12.8800001F}});
        sink->AddBezier({{216.839996F, 11.9092999F}, {218.968002F, 11.4239998F}, {221.356995F, 11.4239998F}});
        sink->AddBezier({{224.231995F, 11.4239998F}, {226.807999F, 12.1147003F}, {229.085007F, 13.4960003F}});
        sink->AddBezier({{231.399994F, 14.8773003F}, {233.210999F, 16.7626991F}, {234.516998F, 19.1520004F}});
        sink->AddBezier({{235.860992F, 21.5412998F}, {236.533005F, 24.2292995F}, {236.533005F, 27.2159996F}});
        sink->AddBezier({{236.533005F, 30.2026997F}, {235.860992F, 32.8907013F}, {234.516998F, 35.2799988F}});
        sink->AddBezier({{233.210999F, 37.6693001F}, {231.419006F, 39.5732994F}, {229.141006F, 40.9920006F}});
        sink->AddBezier({{226.863998F, 42.3732986F}, {224.268997F, 43.0639992F}, {221.356995F, 43.0639992F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Shape tree root for layer: Group Layer 8
    // - -  Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    winrt::com_ptr<CanvasGeometry> Geometry_21()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({220.740997F, 37.1839981F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({{222.533005F, 37.1839981F}, {224.119995F, 36.7546997F}, {225.501007F, 35.8959999F}});
        sink->AddBezier({{226.882996F, 35.0373001F}, {227.964996F, 33.8613014F}, {228.748993F, 32.368F}});
        sink->AddBezier({{229.570999F, 30.8372993F}, {229.981003F, 29.1200008F}, {229.981003F, 27.2159996F}});
        sink->AddBezier({{229.981003F, 25.3120003F}, {229.570999F, 23.6133003F}, {228.748993F, 22.1200008F}});
        sink->AddBezier({{227.964996F, 20.6266994F}, {226.882996F, 19.4507008F}, {225.501007F, 18.5919991F}});
        sink->AddBezier({{224.119995F, 17.7332993F}, {222.533005F, 17.3040009F}, {220.740997F, 17.3040009F}});
        sink->AddBezier({{218.987F, 17.3040009F}, {217.399994F, 17.7332993F}, {215.981003F, 18.5919991F}});
        sink->AddBezier({{214.600006F, 19.4507008F}, {213.498993F, 20.6266994F}, {212.677002F, 22.1200008F}});
        sink->AddBezier({{211.893005F, 23.6133003F}, {211.501007F, 25.3120003F}, {211.501007F, 27.2159996F}});
        sink->AddBezier({{211.501007F, 29.1200008F}, {211.893005F, 30.8372993F}, {212.677002F, 32.368F}});
        sink->AddBezier({{213.498993F, 33.8613014F}, {214.600006F, 35.0373001F}, {215.981003F, 35.8959999F}});
        sink->AddBezier({{217.399994F, 36.7546997F}, {218.987F, 37.1839981F}, {220.740997F, 37.1839981F}});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_22()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({6.6987462F, 3.7889483F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({-6.6987462F, 3.7889483F});
        sink->AddLine({-1.42090497E-15F, -7.5778966F});
        sink->AddLine({6.6987462F, 3.7889483F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_23()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({3.42419887F, 2.09566426F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({-3.42419887F, 2.09566426F});
        sink->AddLine({-7.26324082E-16F, -4.19132853F});
        sink->AddLine({3.42419887F, 2.09566426F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Layer aggregator
    // - -  Offset:<60.57122, 16.405792>
    winrt::com_ptr<CanvasGeometry> Geometry_24()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({11.7322235F, -3.35177875F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({4.48131037F, 1.28026557F});
        sink->AddLine({7.25091267F, 8.77507114F});
        sink->AddLine({2.88522424E-16F, 4.14302635F});
        sink->AddLine({-7.25091267F, 8.77507114F});
        sink->AddLine({-4.48131037F, 1.28026557F});
        sink->AddLine({-11.7322235F, -3.35177875F});
        sink->AddLine({-2.7696023F, -3.35177875F});
        sink->AddLine({-2.2660844E-15F, -10.8465843F});
        sink->AddLine({2.7696023F, -3.35177875F});
        sink->AddLine({11.7322235F, -3.35177875F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Layer aggregator
    // - -  Offset:<46.481583, 25.491581>
    winrt::com_ptr<CanvasGeometry> Geometry_25()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({6.04357481F, -1.85670352F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({2.30844021F, 0.70919764F});
        sink->AddLine({3.7351346F, 4.8609128F});
        sink->AddLine({1.48625443E-16F, 2.29501176F});
        sink->AddLine({-3.7351346F, 4.8609128F});
        sink->AddLine({-2.30844021F, 0.70919764F});
        sink->AddLine({-6.04357481F, -1.85670352F});
        sink->AddLine({-1.42669451F, -1.85670352F});
        sink->AddLine({-1.1673194E-15F, -6.00841904F});
        sink->AddLine({1.42669451F, -1.85670352F});
        sink->AddLine({6.04357481F, -1.85670352F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - - Layer aggregator
    // - -  Offset:<60.57122, 27.888523>
    winrt::com_ptr<CanvasGeometry> Geometry_26()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{nullptr};
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{nullptr};
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({4.79576874F, -1.42502487F}, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({1.83182061F, 0.544311047F});
        sink->AddLine({2.96394801F, 3.73076344F});
        sink->AddLine({1.17939001E-16F, 1.76142752F});
        sink->AddLine({-2.96394801F, 3.73076344F});
        sink->AddLine({-1.83182061F, 0.544311047F});
        sink->AddLine({-4.79576874F, -1.42502487F});
        sink->AddLine({-1.1321274F, -1.42502487F});
        sink->AddLine({-9.26304961E-16F, -4.61147738F});
        sink->AddLine({1.1321274F, -1.42502487F});
        sink->AddLine({4.79576874F, -1.42502487F});
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // Color
    ColorKeyFrameAnimation
    ColorAnimation_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0()
    {
        // Frame 0.
        const auto result = CreateColorKeyFrameAnimation(0.0F, {0x00, 0xFF, 0xD6, 0x40}, StepThenHoldEasingFunction());
        // Frame 72.
        // TransparentAlmostSandyBrown_00FFD640
        result.InsertKeyFrame(0.239999995F, {0x00, 0xFF, 0xD6, 0x40}, HoldThenStepEasingFunction());
        // Frame 125.
        // AlmostSandyBrown_FFFFD640
        result.InsertKeyFrame(0.416666657F, {0xFF, 0xFF, 0xD6, 0x40}, CubicBezierEasingFunction_0());
        // Frame 146.
        // TransparentAlmostSandyBrown_00FFD640
        result.InsertKeyFrame(0.486666679F, {0x00, 0xFF, 0xD6, 0x40}, CubicBezierEasingFunction_0());
        return result;
    }

    // - - Layer aggregator
    // -  Offset:<60.57122, 16.405792>
    // Color
    ColorKeyFrameAnimation
    ColorAnimation_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1()
    {
        // Frame 0.
        const auto result = CreateColorKeyFrameAnimation(0.0F, {0x00, 0xFF, 0xD6, 0x40}, HoldThenStepEasingFunction());
        // Frame 170.
        // TransparentAlmostSandyBrown_00FFD640
        result.InsertKeyFrame(0.566666663F, {0x00, 0xFF, 0xD6, 0x40}, CubicBezierEasingFunction_0());
        // Frame 216.
        // AlmostSandyBrown_FFFFD640
        result.InsertKeyFrame(0.720000029F, {0xFF, 0xFF, 0xD6, 0x40}, CubicBezierEasingFunction_0());
        // Frame 226.
        // TransparentAlmostSandyBrown_00FFD640
        result.InsertKeyFrame(0.75333333F, {0x00, 0xFF, 0xD6, 0x40}, CubicBezierEasingFunction_0());
        return result;
    }

    // Color
    ColorKeyFrameAnimation
    ColorAnimation_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2()
    {
        // Frame 0.
        const auto result = CreateColorKeyFrameAnimation(0.0F, {0x00, 0xFF, 0xD6, 0x40}, HoldThenStepEasingFunction());
        // Frame 170.
        // TransparentAlmostSandyBrown_00FFD640
        result.InsertKeyFrame(0.566666663F, {0x00, 0xFF, 0xD6, 0x40}, CubicBezierEasingFunction_0());
        // Frame 205.
        // SemiTransparentAlmostSandyBrown_7FFFD640
        result.InsertKeyFrame(0.683333337F, {0x7F, 0xFF, 0xD6, 0x40}, CubicBezierEasingFunction_0());
        // Frame 216.
        // AlmostSandyBrown_FFFFD640
        result.InsertKeyFrame(0.720000029F, {0xFF, 0xFF, 0xD6, 0x40}, CubicBezierEasingFunction_0());
        // Frame 226.
        // TransparentAlmostSandyBrown_00FFD640
        result.InsertKeyFrame(0.75333333F, {0x00, 0xFF, 0xD6, 0x40}, CubicBezierEasingFunction_0());
        return result;
    }

    CompositionColorBrush
    AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0()
    {
        if (_animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0 !=
            nullptr)
        {
            return _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0;
        }
        const auto result =
            _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0 =
                _c.CreateColorBrush();
        return result;
    }

    // - Layer aggregator
    // Offset:<60.57122, 16.405792>
    CompositionColorBrush
    AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1()
    {
        if (_animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1 !=
            nullptr)
        {
            return _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1;
        }
        const auto result =
            _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1 =
                _c.CreateColorBrush();
        return result;
    }

    CompositionColorBrush
    AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2()
    {
        if (_animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2 !=
            nullptr)
        {
            return _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2;
        }
        const auto result =
            _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2 =
                _c.CreateColorBrush();
        return result;
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionColorBrush ColorBrush_SemiTransparentBlack()
    {
        return _c.CreateColorBrush({0xCC, 0x00, 0x00, 0x00});
    }

    CompositionColorBrush ColorBrush_White()
    {
        return (_colorBrush_White == nullptr) ? _colorBrush_White = _c.CreateColorBrush({0xFF, 0xFF, 0xFF, 0xFF})
                                              : _colorBrush_White;
    }

    // - Layer aggregator
    // Offset:<60.875, 20.559483>
    // .EllipseGeometry
    CompositionEllipseGeometry Ellipse_7p431x7p232()
    {
        const auto result = _c.CreateEllipseGeometry();
        result.Radius({7.43126583F, 7.23156548F});
        return result;
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_00()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_00())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_01()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_01())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_02()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_02())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_03()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_03())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_04()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_04())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_05()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_05())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_06()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_06())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_07()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_07())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_08()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_08())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_09()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_09())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_10()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_10())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_11()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_11())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_12()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_12())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_13()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_13())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_14()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_14())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_15()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_15())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_16()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_16())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_17()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_17())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_18()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_18())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_19()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_19())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_20()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_20())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    CompositionPathGeometry PathGeometry_21()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_21())));
    }

    CompositionPathGeometry PathGeometry_22()
    {
        return (_pathGeometry_22 == nullptr)
                   ? _pathGeometry_22 =
                         _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_22())))
                   : _pathGeometry_22;
    }

    CompositionPathGeometry PathGeometry_23()
    {
        return (_pathGeometry_23 == nullptr)
                   ? _pathGeometry_23 =
                         _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_23())))
                   : _pathGeometry_23;
    }

    // - Layer aggregator
    // Offset:<60.57122, 16.405792>
    CompositionPathGeometry PathGeometry_24()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_24())));
    }

    // - Layer aggregator
    // Offset:<46.481583, 25.491581>
    CompositionPathGeometry PathGeometry_25()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_25())));
    }

    // - Layer aggregator
    // Offset:<60.57122, 27.888523>
    CompositionPathGeometry PathGeometry_26()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_26())));
    }

    // - Shape tree root for layer: Group Layer 8
    // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
    // .RectangleGeometry
    CompositionRoundedRectangleGeometry RoundedRectangle_702p686x144()
    {
        const auto result = _c.CreateRoundedRectangleGeometry();
        result.CornerRadius({72.0F, 72.0F});
        result.Offset({-351.343201F, -72.0F});
        result.Size({702.686401F, 144.0F});
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Scale:0.99999994,0.99999994, Offset:<56.54167, -2.2762339E-05>
    CompositionSpriteShape SpriteShape_00()
    {
        // Offset:<76.95, 85.89468>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = RoundedRectangle_702p686x144();
        const auto result =
            CreateSpriteShape(geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 76.9499969F, 85.8946762F},
                              ColorBrush_SemiTransparentBlack());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-211.73004, -77.6732>
    CompositionSpriteShape SpriteShape_01()
    {
        // Offset:<68.531586, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_00();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.5315857F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-211.73004, -77.6732>
    CompositionSpriteShape SpriteShape_02()
    {
        // Offset:<68.531586, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_01();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.5315857F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-211.73004, -77.6732>
    CompositionSpriteShape SpriteShape_03()
    {
        // Offset:<68.531586, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_02();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.5315857F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-211.73004, -77.6732>
    CompositionSpriteShape SpriteShape_04()
    {
        // Offset:<68.531586, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_03();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.5315857F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-211.73004, -77.6732>
    CompositionSpriteShape SpriteShape_05()
    {
        // Offset:<68.531586, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_04();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.5315857F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-354.53253, -77.5052>
    CompositionSpriteShape SpriteShape_06()
    {
        // Offset:<68.85347, 85.21246>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_05();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.8534698F, 85.2124634F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-354.53253, -77.5052>
    CompositionSpriteShape SpriteShape_07()
    {
        // Offset:<68.85347, 85.21246>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_06();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.8534698F, 85.2124634F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-354.53253, -77.5052>
    CompositionSpriteShape SpriteShape_08()
    {
        // Offset:<68.85347, 85.21246>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_07();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.8534698F, 85.2124634F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-354.53253, -77.5052>
    CompositionSpriteShape SpriteShape_09()
    {
        // Offset:<68.85347, 85.21246>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_08();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.8534698F, 85.2124634F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:  Offset:<-354.53253, -77.5052>
    CompositionSpriteShape SpriteShape_10()
    {
        // Offset:<68.85347, 85.21246>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_09();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 68.8534698F, 85.2124634F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_11()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_10();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_12()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_11();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_13()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_12();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_14()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_13();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_15()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_14();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_16()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_15();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_17()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_16();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_18()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_17();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_19()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_18();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_20()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_19();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_21()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_20();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Shape tree root for layer: Group Layer 8
    // ShapeGroup:
    CompositionSpriteShape SpriteShape_22()
    {
        // Offset:<78.2678, 85.20714>, Rotation:-0.00735934723327736 degrees,
        // Scale:<0.031724602, 0.031724602>
        const auto geometry = PathGeometry_21();
        const auto result = CreateSpriteShape(
            geometry, {0.031724602F, 0.0F, 0.0F, 0.031724602F, 78.2677994F, 85.2071381F}, ColorBrush_White());
        ;
        return result;
    }

    // Layer aggregator
    // Offset:<60.875, 20.559483>
    CompositionSpriteShape SpriteShape_23()
    {
        // Offset:<60.875, 20.559483>
        const auto geometry = Ellipse_7p431x7p232();
        const auto result = CreateSpriteShape(
            geometry, {1.0F, 0.0F, 0.0F, 1.0F, 60.875F, 20.5594826F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0());
        ;
        return result;
    }

    // Layer aggregator
    // Offset:<60.57122, 8.827896>
    CompositionSpriteShape SpriteShape_24()
    {
        // Offset:<60.57122, 8.827896>
        const auto geometry = PathGeometry_22();
        const auto result = CreateSpriteShape(
            geometry, {1.0F, 0.0F, 0.0F, 1.0F, 60.5712204F, 8.82789612F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0());
        ;
        return result;
    }

    // Layer aggregator
    // RotationDegrees:180, Offset:<60.57122, 32.5>
    CompositionSpriteShape SpriteShape_25()
    {
        // Offset:<60.57122, 32.5>, Rotation:-180 degrees
        const auto geometry = PathGeometry_22();
        const auto result = CreateSpriteShape(
            geometry, {-1.0F, 0.0F, -0.0F, -1.0F, 60.5712204F, 32.5F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0());
        ;
        return result;
    }

    // Layer aggregator
    // RotationDegrees:149.4335479736328, Offset:<47.80654, 20.559483>
    CompositionSpriteShape SpriteShape_26()
    {
        // Offset:<47.80654, 20.559483>, Rotation:149.43354146662534 degrees
        const auto geometry = PathGeometry_22();
        const auto result = CreateSpriteShape(
            geometry, {-0.861039877F, 0.508537412F, -0.508537412F, -0.861039877F, 47.8065414F, 20.5594826F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0());
        ;
        return result;
    }

    // Layer aggregator
    // RotationDegrees:90.60527801513672, Offset:<73.30654, 20.559483>
    CompositionSpriteShape SpriteShape_27()
    {
        // Offset:<73.30654, 20.559483>, Rotation:90.60528021092793 degrees
        const auto geometry = PathGeometry_22();
        const auto result = CreateSpriteShape(
            geometry, {-0.0105639361F, 0.99994421F, -0.99994421F, -0.0105639361F, 73.3065414F, 20.5594826F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0());
        ;
        return result;
    }

    // Layer aggregator
    // RotationDegrees:101.8282470703125, Offset:<49.982864, 30.65942>
    CompositionSpriteShape SpriteShape_28()
    {
        // Offset:<49.982864, 30.65942>, Rotation:101.82824406540925 degrees,
        // Scale:<0.99999994, 0.99999994>
        const auto geometry = PathGeometry_23();
        const auto result = CreateSpriteShape(
            geometry, {-0.204978555F, 0.978766441F, -0.978766441F, -0.204978555F, 49.9828644F, 30.65942F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0());
        ;
        return result;
    }

    // Layer aggregator
    // RotationDegrees:80.00962829589844, Offset:<50.001896, 10.16107>
    CompositionSpriteShape SpriteShape_29()
    {
        // Offset:<50.001896, 10.16107>, Rotation:80.00962808983671 degrees
        const auto geometry = PathGeometry_23();
        const auto result = CreateSpriteShape(
            geometry, {0.173482686F, 0.984836936F, -0.984836936F, 0.173482686F, 50.0018959F, 10.1610699F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0());
        ;
        return result;
    }

    // Layer aggregator
    // RotationDegrees:138.46319580078125, Offset:<71.06964, 30.50243>
    CompositionSpriteShape SpriteShape_30()
    {
        // Offset:<71.06964, 30.50243>, Rotation:138.4631942177965 degrees
        const auto geometry = PathGeometry_23();
        const auto result = CreateSpriteShape(
            geometry, {-0.748529911F, 0.663101017F, -0.663101017F, -0.748529911F, 71.0696411F, 30.50243F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0());
        ;
        return result;
    }

    // Layer aggregator
    // RotationDegrees:35.58753204345703, Offset:<71.25, 10.696317>
    CompositionSpriteShape SpriteShape_31()
    {
        // Offset:<71.25, 10.696317>, Rotation:35.587532110465304 degrees
        const auto geometry = PathGeometry_23();
        const auto result = CreateSpriteShape(
            geometry, {0.813227415F, 0.581946015F, -0.581946015F, 0.813227415F, 71.25F, 10.6963167F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0());
        ;
        return result;
    }

    // Layer aggregator
    // Offset:<60.57122, 16.405792>
    CompositionSpriteShape SpriteShape_32()
    {
        // Offset:<60.57122, 16.405792>
        const auto geometry = PathGeometry_24();
        const auto result = CreateSpriteShape(
            geometry, {1.0F, 0.0F, 0.0F, 1.0F, 60.5712204F, 16.4057922F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1());
        ;
        return result;
    }

    // Layer aggregator
    // Offset:<46.481583, 25.491581>
    CompositionSpriteShape SpriteShape_33()
    {
        // Offset:<46.481583, 25.491581>
        const auto geometry = PathGeometry_25();
        const auto result = CreateSpriteShape(
            geometry, {1.0F, 0.0F, 0.0F, 1.0F, 46.4815826F, 25.491581F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2());
        ;
        return result;
    }

    // Layer aggregator
    // Offset:<60.57122, 27.888523>
    CompositionSpriteShape SpriteShape_34()
    {
        // Offset:<60.57122, 27.888523>
        const auto geometry = PathGeometry_26();
        const auto result = CreateSpriteShape(
            geometry, {1.0F, 0.0F, 0.0F, 1.0F, 60.5712204F, 27.8885231F},
            AnimatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2());
        ;
        return result;
    }

    // Transforms for simple_logo.png 1
    CompositionSurfaceBrush SurfaceBrush_0()
    {
        return _c.CreateSurfaceBrush(_image_2);
    }

    // Transforms for simple_logo - Copy.png 1
    CompositionSurfaceBrush SurfaceBrush_1()
    {
        return _c.CreateSurfaceBrush(_image_1);
    }

    // Transforms for simple_logo - Copy (2).png 1
    CompositionSurfaceBrush SurfaceBrush_2()
    {
        return _c.CreateSurfaceBrush(_image_0);
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        if (_root != nullptr)
        {
            return _root;
        }
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        const auto children = result.Children();
        // Shape tree root for layer: Group Layer 8
        children.InsertAtTop(ShapeVisual_0());
        // Transforms for simple_logo.png 1
        children.InsertAtTop(SpriteVisual_0());
        // Transforms for simple_logo - Copy.png 1
        children.InsertAtTop(SpriteVisual_1());
        // Transforms for simple_logo - Copy (2).png 1
        children.InsertAtTop(SpriteVisual_2());
        // Layer aggregator
        children.InsertAtTop(ShapeVisual_1());
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return (_cubicBezierEasingFunction_0 == nullptr)
                   ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({0.25F, 0.25F}, {0.75F, 0.75F})
                   : _cubicBezierEasingFunction_0;
    }

    // Shape tree root for layer: Group Layer 8
    ShapeVisual ShapeVisual_0()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({90.0F, 90.0F});
        const auto shapes = result.Shapes();
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_00());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_01());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_02());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_03());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_04());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_05());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_06());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_07());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_08());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_09());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_10());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_11());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_12());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_13());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_14());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_15());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_16());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_17());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_18());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_19());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_20());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_21());
        // Scale:0.09221312,0.09221312, Offset:<65.7, 83.58935>
        shapes.Append(SpriteShape_22());
        return result;
    }

    // Layer aggregator
    ShapeVisual ShapeVisual_1()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({90.0F, 90.0F});
        const auto shapes = result.Shapes();
        // Offset:<60.875, 20.559483>
        shapes.Append(SpriteShape_23());
        // Offset:<60.57122, 8.827896>
        shapes.Append(SpriteShape_24());
        // RotationDegrees:180, Offset:<60.57122, 32.5>
        shapes.Append(SpriteShape_25());
        // RotationDegrees:149.4335479736328, Offset:<47.80654, 20.559483>
        shapes.Append(SpriteShape_26());
        // RotationDegrees:90.60527801513672, Offset:<73.30654, 20.559483>
        shapes.Append(SpriteShape_27());
        // RotationDegrees:101.8282470703125, Offset:<49.982864, 30.65942>
        shapes.Append(SpriteShape_28());
        // RotationDegrees:80.00962829589844, Offset:<50.001896, 10.16107>
        shapes.Append(SpriteShape_29());
        // RotationDegrees:138.46319580078125, Offset:<71.06964, 30.50243>
        shapes.Append(SpriteShape_30());
        // RotationDegrees:35.58753204345703, Offset:<71.25, 10.696317>
        shapes.Append(SpriteShape_31());
        // Offset:<60.57122, 16.405792>
        shapes.Append(SpriteShape_32());
        // Offset:<46.481583, 25.491581>
        shapes.Append(SpriteShape_33());
        // Offset:<60.57122, 27.888523>
        shapes.Append(SpriteShape_34());
        return result;
    }

    // Transforms for simple_logo.png 1
    SpriteVisual SpriteVisual_0()
    {
        if (_spriteVisual_0 != nullptr)
        {
            return _spriteVisual_0;
        }
        const auto result = _spriteVisual_0 = _c.CreateSpriteVisual();
        result.CenterPoint({16.0F, 24.0F, 0.0F});
        result.Scale({1.0F, 1.0F, 0.0F});
        result.Size({32.0F, 48.0F});
        result.Brush(SurfaceBrush_0());
        return result;
    }

    // Transforms for simple_logo - Copy.png 1
    SpriteVisual SpriteVisual_1()
    {
        if (_spriteVisual_1 != nullptr)
        {
            return _spriteVisual_1;
        }
        const auto result = _spriteVisual_1 = _c.CreateSpriteVisual();
        result.CenterPoint({15.0F, 23.5F, 0.0F});
        result.Scale({1.0F, 1.0F, 0.0F});
        result.Size({30.0F, 47.0F});
        result.Brush(SurfaceBrush_1());
        return result;
    }

    // Transforms for simple_logo - Copy (2).png 1
    SpriteVisual SpriteVisual_2()
    {
        if (_spriteVisual_2 != nullptr)
        {
            return _spriteVisual_2;
        }
        const auto result = _spriteVisual_2 = _c.CreateSpriteVisual();
        result.CenterPoint({26.5F, 16.0F, 0.0F});
        result.Scale({1.0F, 1.0F, 0.0F});
        result.Size({53.0F, 32.0F});
        result.Brush(SurfaceBrush_2());
        return result;
    }

    StepEasingFunction HoldThenStepEasingFunction()
    {
        if (_holdThenStepEasingFunction != nullptr)
        {
            return _holdThenStepEasingFunction;
        }
        const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    // Color
    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    // Transforms for simple_logo.png 1
    // Offset
    Vector3KeyFrameAnimation OffsetVector3Animation_0()
    {
        // Frame 0.
        const auto result =
            CreateVector3KeyFrameAnimation(0.0F, {2.68797421F, 35.3331528F, 0.0F}, HoldThenStepEasingFunction());
        // Frame 60.
        result.InsertKeyFrame(0.200000003F, {14.4815836F, 32.5F, 0.0F}, CubicBezierEasingFunction_0());
        // Frame 230.
        result.InsertKeyFrame(0.766666651F, {14.4815836F, 32.5F, 0.0F}, CubicBezierEasingFunction_0());
        // Frame 290.
        result.InsertKeyFrame(0.966666639F, {2.68797421F, 35.3885193F, 0.0F}, CubicBezierEasingFunction_0());
        return result;
    }

    // Transforms for simple_logo - Copy.png 1
    // Offset
    Vector3KeyFrameAnimation OffsetVector3Animation_1()
    {
        // Frame 0.
        const auto result =
            CreateVector3KeyFrameAnimation(0.0F, {54.815609F, 36.2616158F, 0.0F}, HoldThenStepEasingFunction());
        // Frame 60.
        result.InsertKeyFrame(0.200000003F, {46.6909981F, 33.6702538F, 0.0F}, CubicBezierEasingFunction_0());
        // Frame 230.
        result.InsertKeyFrame(0.766666651F, {46.6909981F, 33.6702538F, 0.0F}, CubicBezierEasingFunction_0());
        // Frame 290.
        result.InsertKeyFrame(0.966666639F, {55.5286484F, 36.2616158F, 0.0F}, CubicBezierEasingFunction_0());
        return result;
    }

    // Transforms for simple_logo - Copy (2).png 1
    // Offset
    Vector3KeyFrameAnimation OffsetVector3Animation_2()
    {
        // Frame 0.
        const auto result =
            CreateVector3KeyFrameAnimation(0.0F, {18.25F, 3.8024106F, 0.0F}, HoldThenStepEasingFunction());
        // Frame 60.
        result.InsertKeyFrame(0.200000003F, {18.25F, 13.3279181F, 0.0F}, CubicBezierEasingFunction_0());
        // Frame 230.
        result.InsertKeyFrame(0.766666651F, {18.25F, 13.3279181F, 0.0F}, CubicBezierEasingFunction_0());
        // Frame 290.
        result.InsertKeyFrame(0.966666639F, {18.25F, 3.38851786F, 0.0F}, CubicBezierEasingFunction_0());
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

  public:
    AnimatedLogo_AnimatedVisual(Compositor compositor, LoadedImageSurface image_0, LoadedImageSurface image_1,
                                LoadedImageSurface image_2)
        : _c{compositor}, _image_0(image_0), _image_1(image_1), _image_2(image_2),
          _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{c_durationTicks};
    }

    Visual RootVisual() const
    {
        return _root;
    }

    float2 Size() const
    {
        return {90.0F, 90.0F};
    }

    void CreateAnimations()
    {
        _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0
            .StartAnimation(
                L"Color",
                ColorAnimation_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0(),
                AnimationController_0());
        _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1
            .StartAnimation(
                L"Color",
                ColorAnimation_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1(),
                AnimationController_0());
        _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2
            .StartAnimation(
                L"Color",
                ColorAnimation_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2(),
                AnimationController_0());
        _spriteVisual_0.StartAnimation(L"Offset", OffsetVector3Animation_0(), AnimationController_0());
        _spriteVisual_1.StartAnimation(L"Offset", OffsetVector3Animation_1(), AnimationController_0());
        _spriteVisual_2.StartAnimation(L"Offset", OffsetVector3Animation_2(), AnimationController_0());
    }

    void DestroyAnimations()
    {
        _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_0
            .StopAnimation(L"Color");
        _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_1
            .StopAnimation(L"Color");
        _animatedColorBrush_TransparentAlmostSandyBrown_00FFD640_to_TransparentAlmostSandyBrown_00FFD640_2
            .StopAnimation(L"Color");
        _spriteVisual_0.StopAnimation(L"Offset");
        _spriteVisual_1.StopAnimation(L"Offset");
        _spriteVisual_2.StopAnimation(L"Offset");
    }
};

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual AnimatedLogo::TryCreateAnimatedVisual(
    Compositor const &compositor)
{
    IInspectable diagnostics = nullptr;
    return TryCreateAnimatedVisual(compositor, diagnostics);
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual AnimatedLogo::TryCreateAnimatedVisual(
    Compositor const &compositor, IInspectable &diagnostics)
{
    m_isTryCreateAnimatedVisualCalled = true;
    diagnostics = nullptr;

    EnsureImageLoadingStarted();

    if (m_isImageLoadingAsynchronous && m_loadCompletedEventCount != c_loadedImageSurfaceCount)
    {
        return nullptr;
    }
    auto result = winrt::make<AnimatedLogo_AnimatedVisual>(compositor, _image_0, _image_1, _image_2);
    result.CreateAnimations();
    return result;
}

bool AnimatedLogo::IsImageLoadingAsynchronous()
{
    return m_isImageLoadingAsynchronous;
}

void AnimatedLogo::IsImageLoadingAsynchronous(bool value)
{
    if (!m_isTryCreateAnimatedVisualCalled && m_isImageLoadingAsynchronous != value)
    {
        m_isImageLoadingAsynchronous = value;
        m_PropertyChanged(*this, Microsoft::UI::Xaml::Data::PropertyChangedEventArgs(L"IsImageLoadingAsynchronous"));
    }
}

bool AnimatedLogo::IsImageLoadingCompleted()
{
    return m_isImageLoadingCompleted;
}

void AnimatedLogo::EnsureImageLoadingStarted()
{
    if (!m_isImageLoadingStarted)
    {
        m_isImageLoadingStarted = true;
        TypedEventHandler<LoadedImageSurface, LoadedImageSourceLoadCompletedEventArgs> eventHandler{
            get_weak(), &AnimatedLogo::HandleLoadCompleted};
        {
            InMemoryRandomAccessStream stream{};
            DataWriter dataWriter{stream.GetOutputStreamAt(0)};
            dataWriter.WriteBytes(s_Image_0_Bytes);
            dataWriter.StoreAsync();
            dataWriter.FlushAsync();
            _image_0 = LoadedImageSurface::StartLoadFromStream(stream);
            _image_0.LoadCompleted(eventHandler);
        }
        {
            InMemoryRandomAccessStream stream{};
            DataWriter dataWriter{stream.GetOutputStreamAt(0)};
            dataWriter.WriteBytes(s_Image_1_Bytes);
            dataWriter.StoreAsync();
            dataWriter.FlushAsync();
            _image_1 = LoadedImageSurface::StartLoadFromStream(stream);
            _image_1.LoadCompleted(eventHandler);
        }
        {
            InMemoryRandomAccessStream stream{};
            DataWriter dataWriter{stream.GetOutputStreamAt(0)};
            dataWriter.WriteBytes(s_Image_2_Bytes);
            dataWriter.StoreAsync();
            dataWriter.FlushAsync();
            _image_2 = LoadedImageSurface::StartLoadFromStream(stream);
            _image_2.LoadCompleted(eventHandler);
        }
    }
}

void AnimatedLogo::HandleLoadCompleted(LoadedImageSurface sender, LoadedImageSourceLoadCompletedEventArgs e)
{
    m_loadCompletedEventCount++;

    if (m_loadCompletedEventCount == c_loadedImageSurfaceCount)
    {
        m_isImageLoadingCompleted = true;
        m_PropertyChanged(*this, Microsoft::UI::Xaml::Data::PropertyChangedEventArgs(L"IsImageLoadingCompleted"));
        if (m_isImageLoadingAsynchronous)
        {
            m_IDynamicAnimatedVisualSourceEvent(*this, nullptr);
        }
    }
}

winrt::event_token AnimatedLogo::PropertyChanged(Microsoft::UI::Xaml::Data::PropertyChangedEventHandler const &handler)
{
    return m_PropertyChanged.add(handler);
}

void AnimatedLogo::PropertyChanged(winrt::event_token const &token) noexcept
{
    m_PropertyChanged.remove(token);
}

winrt::event_token AnimatedLogo::AnimatedVisualInvalidated(
    TypedEventHandler<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, IInspectable> const &handler)
{
    return m_IDynamicAnimatedVisualSourceEvent.add(handler);
}

void AnimatedLogo::AnimatedVisualInvalidated(winrt::event_token const &token) noexcept
{
    m_IDynamicAnimatedVisualSourceEvent.remove(token);
}

double AnimatedLogo::FrameCount()
{
    return 300.0;
}

double AnimatedLogo::Framerate()
{
    return 100.0;
}

TimeSpan AnimatedLogo::Duration()
{
    return TimeSpan{30000000L};
}

double AnimatedLogo::FrameToProgress(double frameNumber)
{
    return frameNumber / 300.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> AnimatedLogo::Markers()
{
    return winrt::single_threaded_map<winrt::hstring, double>(std::map<winrt::hstring, double>{
                                                                  {L"NormalToPointerOver_Start", 0.0},
                                                                  {L"PointerOverToNormal_End", 0.0},
                                                                  {L"NormalToPointerOver_End", 0.400166666666667},
                                                                  {L"PointerOverToNormal_Start", 0.400166666666667},
                                                                  {L"PointerOverToPressed_Start", 0.400166666666667},
                                                                  {L"PressedToPointerOver_End", 0.416833333333333},
                                                                  {L"PointerOverToPressed_End", 0.720166666666667},
                                                                  {L"PressedToPointerOver_Start", 0.720166666666667},
                                                                  {L"PressedToNormal_Start", 0.766833333333333},
                                                                  {L"PressedToNormal_End", 1.0},
                                                              })
        .GetView();
}

void AnimatedLogo::SetColorProperty(hstring const &, Color)
{
}

void AnimatedLogo::SetScalarProperty(hstring const &, double)
{
}
} // namespace winrt::CppWinUIGallery::implementation
