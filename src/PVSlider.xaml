<Page
    x:Class="CppWinUIGallery.PVSlider"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:CppWinUIGallery"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Page.Resources>
        <Style x:Key="Switch" TargetType="ToggleSwitch">
            <Setter Property="Background" Value="{ThemeResource ToggleSwitchKnobFillOff}" />
            <Setter Property="Foreground" Value="{ThemeResource ToggleSwitchKnobFillOff}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleSwitch" x:Name="ToggleSwitchTemplate">
                        <Grid x:Name="RootGrid" CornerRadius="7" Background="{TemplateBinding Background}">
                            <Grid x:Name="Container">
                                <Grid>
                                    <Thumb x:Name="KnobThumb" Canvas.Left="70"
                           Canvas.Top="20" Margin="0,0,0,0" Width="45" Height="38"
                           CornerRadius="7" HorizontalAlignment="Left"
                           DragStarted="OnThumbDragStarted" 
                           DragDelta="OnThumbDragDelta" 
                           DragCompleted="OnThumbDragCompleted"
                           BorderThickness="1" BorderBrush="#808080">
                                        <Thumb.Background>
                                            <SolidColorBrush Color="#307a7679"/>
                                        </Thumb.Background>

                                        <Thumb.RenderTransform>
                                            <TranslateTransform x:Name="KnobTransform"/>
                                        </Thumb.RenderTransform>
                                    </Thumb>


                                </Grid>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>




    </Page.Resources>
    <ScrollViewer >
        <Grid  >
            <StackPanel Margin="0">
                <TextBlock Text="Photo/Video Slider" Margin="50,40" Style="{StaticResource TitleLargeTextBlockStyle}"/>
            </StackPanel>
            <StackPanel x:Name="SliderPanel" Margin="45,120" Orientation="Horizontal" CornerRadius="8" Height="45" BorderBrush="#30292f" BorderThickness="1.5" HorizontalAlignment="Left" VerticalAlignment="Top" >
                <Grid>
                    <Rectangle Fill="{ThemeResource AccentControlElevationBorderBrush}" Height="45" Width="90"/>
                    <StackPanel VerticalAlignment="Center" Margin="11"  HorizontalAlignment="Left">
                        <SymbolIcon x:Name="CameraIcon" Symbol="Camera"  IsHitTestVisible="True" Foreground="#00ff00"/>
                    </StackPanel>
                    <StackPanel VerticalAlignment="Center" Margin="0,0,11,0"  HorizontalAlignment="Right">
                        <SymbolIcon x:Name="VideoIcon" Symbol="Video"  IsHitTestVisible="True" Foreground="#80FF0000" />
                    </StackPanel>
                </Grid>
            </StackPanel>

            <StackPanel Margin="46,123,0,0">
                <Grid>
                    <ToggleSwitch Width="90"  Background="{ThemeResource ControlAltFillColorTransparent}" x:Name="Switch" Style="{ThemeResource Switch}" OffContent="" PointerPressed="Switch_PointerPressed"/>
                </Grid>
            </StackPanel>


            <StackPanel Margin="50,185">
                <TextBlock  Style="{StaticResource BaseTextBlockStyle}"  >
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="Unlike the ToggleSwitch example (the one built to look like the &quot;Subscription&quot;/&quot;Perpetual&quot; switch from the Advanced Installer purchase page), the Photo/Video Slider uses the concept of "></Run>
                    <Run Foreground="{ThemeResource SystemFillColorSuccessBrush}" Text="XAML Styles"></Run>
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="."></Run>
                </TextBlock>
                <TextBlock Margin="0,10" Style="{StaticResource BaseTextBlockStyle}" >
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="In the Style definition, you will need:"></Run>
                </TextBlock>
                <TextBlock  Margin="50,5,0,5" Style="{StaticResource BaseTextBlockStyle}">
                    <Run Text="- a TargetType attribute" Foreground="{ThemeResource SystemColorHotlightColor}"></Run>
                    <Run Text="- a string that specifies a FrameworkElement type to apply the style to"></Run>
                </TextBlock>
                <TextBox  Text=" &lt;ControlTemplate TargetType=&quot;ToggleSwitch&quot; x:Name=&quot;ToggleSwitchTemplate&quot;>" IsReadOnly="True">

                </TextBox>
                <TextBlock  Margin="50,10" Style="{StaticResource BaseTextBlockStyle}">
                    <Run Foreground="{ThemeResource SystemColorHotlightColor}" Text="- a collection of one or more Setter elements"></Run>
                    <Run Text="- each Setter element requires a "></Run>
                    <Run Foreground="{ThemeResource SystemFillColorSuccessBrush}" Text="Property "></Run>
                    <Run Text="and a "></Run>
                    <Run Foreground="{ThemeResource SystemFillColorSuccessBrush}" Text="Value." ></Run>
                    <Run Text=" These property settings indicate what control property the setting applies to, and the value to set for that property." ></Run>
                </TextBlock>
                <TextBox Text=" &lt;Setter Property=&quot;Foreground=&quot; Value==&quot;{StaticResource ToggleSwitchKnobFillOff}=&quot;/>" IsReadOnly="True"></TextBox>
                <TextBlock  Style="{StaticResource BaseTextBlockStyle}" Margin="0,10">
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="A"></Run>
                    <Run Foreground="{ThemeResource SystemFillColorSuccessBrush}" Text="ControlTemplate"></Run>
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text=" defines the visuals of a control. There are really only two properties you use when defining a ControlTemplate: the"></Run>
                    <Run Foreground="{ThemeResource SystemFillColorSuccessBrush}" Text="TargetType,"></Run>
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="and the implicit XAML content. ControlTemplate inherits "></Run>
                    <Run Foreground="{ThemeResource SystemFillColorSuccessBrush}" Text="the implicit XAML content behavior"></Run>
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="from its FrameworkTemplate parent."></Run>
                </TextBlock>
                <TextBox Text="&lt;ControlTemplate TargetType=&quot;ToggleSwitch&quot; x:Name=&quot;ToggleSwitchTemplate&quot;>" IsReadOnly="True"></TextBox>
                <TextBlock Margin="0,10" Style="{StaticResource BaseTextBlockStyle}">
                    <Run Text="For this implementation, adjustments to the" Foreground="{ThemeResource TextFillColorSecondaryBrush}"></Run>
                    <Run Foreground="{ThemeResource SystemColorHotlightColor}" Text="Thumb"></Run>
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="element of our ToggleSwitch will be needed. As for the panel behind it, a StackPanel will be used as the slider background for the camera and video icons."></Run>
                </TextBlock>
                <TextBlock Margin="0,0" Text="The movement and behavior of the Thumb element are both controlled from the code-behind.Drag controls are added; left and right bounds are set so the Thumb doesn't go past the StackPanel."  Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}"></TextBlock>
                <StackPanel>
                <TextBlock Style="{StaticResource BaseTextBlockStyle}" Margin="0,15,0,5" Text="Methods for controlling the Thumb element:"></TextBlock>
                <TextBlock Style="{StaticResource BaseTextBlockStyle}" Margin="50,0" >
                    <Run Text="- " Foreground="{ThemeResource TextFillColorSecondaryBrush}"></Run>
                    <Run Text="OnThumbDragStarted" Foreground="{ThemeResource SystemColorHotlightColor}"></Run>
                    <Run Text="- Detects if dragging of the Thumb has started and creates its TranslateTransform" Foreground="{ThemeResource TextFillColorSecondaryBrush}"></Run>
                </TextBlock>
                <TextBlock Style="{StaticResource BaseTextBlockStyle}" Margin="50,10,0,0" >
    <Run Text="- " Foreground="{ThemeResource TextFillColorSecondaryBrush}"></Run>
    <Run Text="OnThumbDragDelta" Foreground="{ThemeResource SystemColorHotlightColor}"></Run>
    <Run Text="- If the thumb is being dragged, it computes its new position, constraining the movement between the two boundaries." Foreground="{ThemeResource TextFillColorSecondaryBrush}"></Run>
                </TextBlock>
                <TextBlock Style="{StaticResource BaseTextBlockStyle}" Margin="50,10" >
    <Run Text="- " Foreground="{ThemeResource TextFillColorSecondaryBrush}"></Run>
    <Run Text="OnThumbDragCompleted" Foreground="{ThemeResource SystemColorHotlightColor}"></Run>
    <Run Text="- After the drag has been completed, it snaps the thumb to the nearest bound. It also updates the icon's Active/Inactive states." Foreground="{ThemeResource TextFillColorSecondaryBrush}"></Run>
                </TextBlock>
                <TextBlock Style="{StaticResource BaseTextBlockStyle}" Margin="50,0" >

<Run Text="- " Foreground="{ThemeResource TextFillColorSecondaryBrush}"></Run>
<Run Text="Switch_PointerPressed" Foreground="{ThemeResource SystemColorHotlightColor}"></Run>
<Run Text="- If the users chooses to click on the icons instead of dragging the Thumb, it snaps the Thumb to the chosen bound, while also updating the icon's Active/Inactive states." Foreground="{ThemeResource TextFillColorSecondaryBrush}"></Run>
                </TextBlock>
                    <Button Content="XAML Code" Margin="0, 20, 0, 10" IsHitTestVisible="False"/>
                </StackPanel>
            <StackPanel  Margin="0,0,0,0">
                    <ScrollViewer   CornerRadius="8" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden" Height="300" Margin="0,0,0,10">
                    <TextBox Loaded="SourceCodeTextBox_Loaded" x:Name="SourceCodeTextBox" 
                         IsReadOnly="True" 
                         AcceptsReturn="True"
                         TextWrapping="Wrap"
                         Margin="0"
                         VerticalAlignment="Stretch"
                         HorizontalAlignment="Stretch"
                         MinWidth="300"
                         Visibility="Visible"/>
                </ScrollViewer>
            </StackPanel>
            <StackPanel>
                    <Button Content="C++ Code" Margin="0, 20, 0, 0" IsHitTestVisible="False"/>
            </StackPanel>
            <StackPanel  Margin="0,0,0,0">
                    <ScrollViewer  CornerRadius="8" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden" Height="300" Margin="0,10,0,10">
                    <TextBox  Loaded="CppCodeTextBox_Loaded" x:Name="CppCodeTextBox" 
                        IsReadOnly="True" 
                        AcceptsReturn="True"
                        TextWrapping="Wrap"
                        Margin="0"
                             
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        Visibility="Visible" />
                </ScrollViewer>
            </StackPanel>
            </StackPanel>
        </Grid>
    </ScrollViewer>
</Page>
