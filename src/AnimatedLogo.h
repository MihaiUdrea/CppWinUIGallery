#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.0.280225.1+7cd366a738
//       
//       Command:
//           LottieGen -Language Cppwinrt -Namespace CppWinUIGallery -WinUIVersion 3.0 -InputFile AnimatedLogo.json
//       
//       Input file:
//           AnimatedLogo.json (193407 bytes created 17:21+03:00 Aug 8 2024)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "AnimatedLogo.g.h"

namespace winrt::CppWinUIGallery
{
    // Name:        Comp 1
    // Frame rate:  100 fps
    // Frame count: 300
    // Duration:    3000.0 mS
    // ______________________________________________________________________________________________________________________________________________________________________
    // |           Marker           |                               Constant                                |      Start      | Duration |             Progress             |
    // |                            |                              start | end                              |  Frame |     mS |       mS |        start | end               |
    // |____________________________|____________________________________|__________________________________|________|________|__________|______________|___________________|
    // | NormalToPointerOver_Start  | M_NormalToPointerOver_Start_start  | M_NormalToPointerOver_Start_end  |    0.0 |    0.0 |   1200.0 | 0.0F         | 0.400166666666667 |
    // | PointerOverToNormal_End    | M_PointerOverToNormal_End_start    | M_PointerOverToNormal_End_end    |    0.0 |    0.0 |   1200.0 | 0.0F         | 0.400166666666667 |
    // | NormalToPointerOver_End    | M_NormalToPointerOver_End_start    | M_NormalToPointerOver_End_end    |  120.0 | 1200.0 |   1200.0 | 0.400166661F | 0.800166666666667 |
    // | PointerOverToNormal_Start  | M_PointerOverToNormal_Start_start  | M_PointerOverToNormal_Start_end  |  120.0 | 1200.0 |   1200.0 | 0.400166661F | 0.800166666666667 |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start_start | M_PointerOverToPressed_Start_end |  120.0 | 1200.0 |    960.0 | 0.400166661F | 0.720166666666667 |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End_start   | M_PressedToPointerOver_End_end   |  125.0 | 1250.0 |    910.0 | 0.416833341F | 0.720166666666667 |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End_start   | M_PointerOverToPressed_End_end   |  216.0 | 2160.0 |    840.0 | 0.720166683F | 1.0               |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start_start | M_PressedToPointerOver_Start_end |  216.0 | 2160.0 |    840.0 | 0.720166683F | 1.0               |
    // | PressedToNormal_Start      | M_PressedToNormal_Start_start      | M_PressedToNormal_Start_end      |  230.0 | 2300.0 |    700.0 | 0.766833305F | 1.0               |
    // | PressedToNormal_End        | M_PressedToNormal_End              |                                  |  300.0 | 3000.0 |          | 1.0F         |                   |
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    namespace implementation
    {
        class AnimatedLogo
            : public AnimatedLogoT<AnimatedLogo>
        {
            const int c_loadedImageSurfaceCount = 3;
            int m_loadCompletedEventCount{};
            bool m_isImageLoadingAsynchronous{};
            bool m_isImageLoadingCompleted{};
            bool m_isImageLoadingStarted{};
            bool m_isTryCreateAnimatedVisualCalled{};
            winrt::event<Windows::Foundation::TypedEventHandler<
                Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource,
                Windows::Foundation::IInspectable>> m_IDynamicAnimatedVisualSourceEvent{};
            winrt::event<Microsoft::UI::Xaml::Data::PropertyChangedEventHandler> m_PropertyChanged{};
            winrt::Microsoft::UI::Xaml::Media::LoadedImageSurface _image_0{ nullptr };
            winrt::Microsoft::UI::Xaml::Media::LoadedImageSurface _image_1{ nullptr };
            winrt::Microsoft::UI::Xaml::Media::LoadedImageSurface _image_2{ nullptr };
            void EnsureImageLoadingStarted();
            void HandleLoadCompleted(
                winrt::Microsoft::UI::Xaml::Media::LoadedImageSurface sender,
                winrt::Microsoft::UI::Xaml::Media::LoadedImageSourceLoadCompletedEventArgs e);
        public:
            // Animation duration: 3.000 seconds.
            static constexpr int64_t c_durationTicks{ 30000000L };

            // Marker: NormalToPointerOver_Start.
            static constexpr float M_NormalToPointerOver_Start_start{ 0.0F };

            // Marker: NormalToPointerOver_Start.
            static constexpr float M_NormalToPointerOver_Start_end{ 0.400166661F };

            // Marker: PointerOverToNormal_End.
            static constexpr float M_PointerOverToNormal_End_start{ 0.0F };

            // Marker: PointerOverToNormal_End.
            static constexpr float M_PointerOverToNormal_End_end{ 0.400166661F };

            // Marker: NormalToPointerOver_End.
            static constexpr float M_NormalToPointerOver_End_start{ 0.400166661F };

            // Marker: NormalToPointerOver_End.
            static constexpr float M_NormalToPointerOver_End_end{ 0.800166667F };

            // Marker: PointerOverToNormal_Start.
            static constexpr float M_PointerOverToNormal_Start_start{ 0.400166661F };

            // Marker: PointerOverToNormal_Start.
            static constexpr float M_PointerOverToNormal_Start_end{ 0.800166667F };

            // Marker: PointerOverToPressed_Start.
            static constexpr float M_PointerOverToPressed_Start_start{ 0.400166661F };

            // Marker: PointerOverToPressed_Start.
            static constexpr float M_PointerOverToPressed_Start_end{ 0.720166683F };

            // Marker: PressedToPointerOver_End.
            static constexpr float M_PressedToPointerOver_End_start{ 0.416833341F };

            // Marker: PressedToPointerOver_End.
            static constexpr float M_PressedToPointerOver_End_end{ 0.720166683F };

            // Marker: PointerOverToPressed_End.
            static constexpr float M_PointerOverToPressed_End_start{ 0.720166683F };

            // Marker: PointerOverToPressed_End.
            static constexpr float M_PointerOverToPressed_End_end{ 1.0F };

            // Marker: PressedToPointerOver_Start.
            static constexpr float M_PressedToPointerOver_Start_start{ 0.720166683F };

            // Marker: PressedToPointerOver_Start.
            static constexpr float M_PressedToPointerOver_Start_end{ 1.0F };

            // Marker: PressedToNormal_Start.
            static constexpr float M_PressedToNormal_Start_start{ 0.766833305F };

            // Marker: PressedToNormal_Start.
            static constexpr float M_PressedToNormal_Start_end{ 1.0F };

            // Marker: PressedToNormal_End.
            static constexpr float M_PressedToNormal_End{ 1.0F };

            winrt::event_token PropertyChanged(winrt::Microsoft::UI::Xaml::Data::PropertyChangedEventHandler const& handler);
            void PropertyChanged(winrt::event_token const& token) noexcept;

            winrt::event_token AnimatedVisualInvalidated(
                winrt::Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, IInspectable> const& handler);
            void AnimatedVisualInvalidated(winrt::event_token const& token) noexcept;

            /// <summary>
            /// If this property is set to true, <see cref="TryCreateAnimatedVisual"/> will return
            /// null until all images have loaded. When all images have loaded,
            /// <see cref="TryCreateAnimatedVisual"/> will return the AnimatedVisual. Once
            /// <see cref="TryCreateAnimatedVisual"/> is called, changes made to this property will
            /// be ignored. Default value is false.
            /// </summary>
            bool IsImageLoadingAsynchronous();
            void IsImageLoadingAsynchronous(bool value);

            /// <summary>
            /// Returns true if all images have finished loading.
            /// </summary>
            bool IsImageLoadingCompleted();

            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
                winrt::Microsoft::UI::Composition::Compositor const& compositor);

            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
                winrt::Microsoft::UI::Composition::Compositor const& compositor,
                winrt::Windows::Foundation::IInspectable& diagnostics);

            // Gets the number of frames in the animation.
            double FrameCount();

            // Gets the framerate of the animation.
            double Framerate();

            // Gets the duration of the animation.
            winrt::Windows::Foundation::TimeSpan Duration();

            // Converts a zero-based frame number to the corresponding progress value denoting the
            // start of the frame.
            double FrameToProgress(double frameNumber);

            // Returns a map from marker names to corresponding progress values.
            winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

            // Sets the color property with the given name, or does nothing if no such property
            // exists.
            void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

            // Sets the scalar property with the given name, or does nothing if no such property
            // exists.
            void SetScalarProperty(hstring const& propertyName, double value);
        };
    }

    namespace factory_implementation
    {
        struct AnimatedLogo : AnimatedLogoT<AnimatedLogo, implementation::AnimatedLogo>
        {
        };
    }
}
