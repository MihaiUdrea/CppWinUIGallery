<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="CppWinUIGallery.LottieIcon"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:CppWinUIGallery"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:animatedvisuals="using:Microsoft.UI.Xaml.Controls.AnimatedVisuals"
    xmlns:controls="using:Microsoft.UI.Xaml.Controls"
    mc:Ignorable="d">
    <Page.Resources>
       
        <ControlTemplate x:Key="LottieButtonTemplate" TargetType="Button">
            <Grid Width="75" Height="50">
                <!-- Use a Border to host the background color -->
                <Border x:Name="BackgroundBorder" Background="LightGray">
                    <ContentPresenter
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"/>
                </Border>

                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal"/>

                        <!-- PointerOver state with visual feedback -->
                        <VisualState x:Name="PointerOver">
                            <Storyboard>
                                <ColorAnimation
                                Storyboard.TargetName="BackgroundBorder"
                                Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                To="LightCoral"
                                Duration="0:0:0.3"/>
                            </Storyboard>
                        </VisualState>

                        <VisualState x:Name="Pressed">
                            <Storyboard>
                                <ColorAnimation
                                Storyboard.TargetName="BackgroundBorder"
                                Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                To="DarkSalmon"
                                Duration="0:0:0.3"/>
                            </Storyboard>
                        </VisualState>

                        <VisualStateGroup.Transitions>
                            <!-- Shortened transition duration for testing -->
                            <VisualTransition From="Normal" To="PointerOver" GeneratedDuration="0:0:0.3"/>
                            <VisualTransition From="PointerOver" To="Pressed" GeneratedDuration="0:0:0.3"/>
                            <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:0:0.3"/>
                        </VisualStateGroup.Transitions>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
            </Grid>
        </ControlTemplate>
    </Page.Resources>

    <ScrollViewer  >
    <Grid >
        
        <StackPanel Orientation="Horizontal"  VerticalAlignment="Top" HorizontalAlignment="Left" >
            <TextBlock Text="Custom Animated Icon" HorizontalAlignment="Left" Style="{StaticResource TitleLargeTextBlockStyle}" Margin="50,40"/>
                <TextBlock HorizontalAlignment="Left" Margin="-465,105" Text="In this example, the custom Animated Icon's implementation is a bit different from the usual one provided by the WinUI 3 Gallery. The concept of Lottie Files will be explained, as well as the process of using this type of file, adjusting its time intervals, and then converting it to actual code." Foreground="{ThemeResource TextFillColorSecondaryBrush}" Style="{StaticResource BaseTextBlockStyle}"/>
        </StackPanel>
        <StackPanel Margin="50,135">
                <TextBlock Text="How it works:" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}"/>

                <ToggleButton Loaded="LottieButton_Loaded"  Width="75" IsEnabled="True" x:Name="LottieButton" Margin="0,10,0,10"  Click="LottieButton_Click"  PointerExited="Button_PointerExited" PointerEntered="Button_PointerEntered">
                   

                    <AnimatedIcon x:Name="SearchAnimatedIcon">
                        <AnimatedIcon.Source>
                            <local:AnimatedLogo/>
                        </AnimatedIcon.Source>
                        <AnimatedIcon.FallbackIconSource>
                            <SymbolIconSource Symbol="GlobalNavigationButton"/>
                        </AnimatedIcon.FallbackIconSource>
                    </AnimatedIcon>
                </ToggleButton>
            
                <!--<Button Click="LottieButton_Click"    x:Name="SwitchAnimation" Content="Switch"/>-->

                <TextBlock Margin="110,-85" Style="{StaticResource TitleTextBlockStyle}" Text="States:"/>
                <TextBlock Margin="120,-76" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="                       • State 1: Hovering in"/>
                <TextBlock Margin="120,-39" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="                       • State 2: Clicking the button - Toggle-On"/>
                <TextBlock Margin="120,-0" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="                       • State 3: Clicking the button - Toggle-Off / Hovering out if button wasn't clicked"/>
        <TextBlock Margin="0,15" Style="{StaticResource TitleTextBlockStyle}"  Text="Lottie Files - What are they?"/>
                <TextBlock Margin="0,-10" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}"  Text="WinUI 3 uses a certain file format for the implementation of its Animated Icon feature - Lottie files. Created for vector graphics animation, they are based on JSON files.However, since they use keys of 1-2 characters in length, they are not readable by humans. Intended as a lighter alternative to GIFs and APNG files, they allow for the inclusion of interactive elements."/>
                <TextBlock Margin="0,20" Style="{StaticResource BaseTextBlockStyle}" Text="The content of these files, specifically, the animations can be created in Adobe After Effects, as advised on the Microsoft AnimatedIcon docmentation page. They can be also created on online platforms like LottieFiles or LottieLab." Foreground="{ThemeResource TextFillColorSecondaryBrush}"/>
        <TextBlock Margin="0,30" Style="{StaticResource TitleTextBlockStyle}"  Text="Proccessing the files"/>
        <TextBlock Margin="0,-20" Style="{StaticResource BaseTextBlockStyle}"  Text="Converting the files into a C++ format calls for the use LottieGen (also referenced as CodeGen). This tool can be installed in a command-line interface, from NuGet:"/>
        <TextBox Text="dotnet tool install -g LottieGen" IsReadOnly="True" Margin="0,10" />
        <TextBlock Margin="0,15" Style="{StaticResource BaseTextBlockStyle}"  Text="To generate classes in either C++ or C#: "/>
        <TextBox Text="LottieGen -InputFile AnimatedLogo.json -Language cppwinrt -WinUIVersion 3.0 -NameSpace CppWinUIGallery" IsReadOnly="True" Margin="0,-5" />
                <TextBlock Margin="0,20" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}"  Text="             • It is recommended to provide the Full Path to the JSON file, not just the Relative Path "/>
                <TextBlock Margin="0,-10" Style="{StaticResource BaseTextBlockStyle}"  HorizontalAlignment="Left"  Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="             • The folder in which the files are created can be chosen by using -OutputFolder and specifying the path to it"/>
                <TextBlock Text="The following files will be generated:"  HorizontalAlignment="Left"  Margin="0,30" Style="{StaticResource BaseTextBlockStyle}"/>
                <TextBlock Text="• CppWinUIGallery.AnimatedLogo.cpp"  HorizontalAlignment="Left" Margin="250,-48" Width="300" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Style="{StaticResource BaseTextBlockStyle}"/>
                <TextBlock Text="• CppWinUIGallery.AnimatedLogo.h"  HorizontalAlignment="Left"  Margin="250,-15" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Style="{StaticResource BaseTextBlockStyle}"/>
                <TextBlock Text="• CppWinUIGallery.AnimatedLogo.idl"   HorizontalAlignment="Left"  Margin="250,20" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Style="{StaticResource BaseTextBlockStyle}"/>
                <InfoBar
                IsOpen="True"
                IsIconVisible="True"
                IsClosable="False"
                Width="800"
                Margin="700,-110,0,0"
                HorizontalAlignment="Left"
                Message="Before adding these files to the project, remove the &quot;CppWinUIGallery &quot; namespace from the name of each file. (e.g. AnimatedLogo.cpp). Traces of this namespace should be also deleted in the .cpp file itself. (e.g. #include &quot;CppWinUIGallery.AnimatedLogo.h&quot;)" />
                <TextBlock Style="{StaticResource BaseTextBlockStyle}"  HorizontalAlignment="Left"  Text="The XAML for this implementation is based on a ToggleButton mechanism:" Foreground="{ThemeResource TextFillColorSecondaryBrush}"></TextBlock>
                
            </StackPanel>
            <StackPanel Margin="50,940,0,0">
                <!-- A Button to show XAML -->
                <Button x:Name="ShowHideButton" Content="Show XAML"  Click="ShowSourceCode_Click" Margin="0,-120,0,10" />
                <!-- A ScrollViewer to enable scrolling -->
                <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden" Height="260" Margin="0,-40,0,10">
                    <!-- A TextBox to display XAML code -->
                    <TextBox x:Name="SourceCodeTextBox" 
IsReadOnly="True" 
AcceptsReturn="True"
TextWrapping="Wrap"
Margin="0"
VerticalAlignment="Stretch"
HorizontalAlignment="Stretch"
MinWidth="300"
Visibility="Collapsed" />
                </ScrollViewer>
            </StackPanel>
            <StackPanel Margin="50,1190">
                <TextBlock Style="{StaticResource BaseTextBlockStyle}" Text="Before converting the Lottie file into C++ code, we have to take note of markers - These are important in mapping the animations to their corresponding time intervals"></TextBlock>
                <TextBlock Margin="0,10,0,5" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="For our implementation we are going to use:"></TextBlock>
                <TextBlock Margin="60,5" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="• Normal" Style="{StaticResource BaseTextBlockStyle}"></TextBlock>
                <TextBlock Margin="60,5" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="• PointerOver" Style="{StaticResource BaseTextBlockStyle}"></TextBlock>
                <TextBlock Margin="60,5" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="• Pressed" Style="{StaticResource BaseTextBlockStyle}"></TextBlock>
                <TextBlock Margin="0,5" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Style="{StaticResource BaseTextBlockStyle}" Text="In the provided documentation for the AnimatedIcon more information is presented on this matter. We can insert &quot;To&quot; and in between states (e.g.NormalToPressed) and _Start/_End (e.g.NormalToPressed_Start) , however, omitting at least one of these two markers (if choosing to use them) will result in a hard cut of the animation (the transitions won't take place). "></TextBlock>
                <TextBlock Margin="0,5" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Style="{StaticResource BaseTextBlockStyle}" Text="After converting the file , these markers will be automatically placed in the C++ source code, thus defining the time intervals used in the mapping." ></TextBlock>
            
            </StackPanel>
            <StackPanel Margin="50,1420">
                <TextBlock  Style="{StaticResource BaseTextBlockStyle}" Text="Regarding the C++ source code, mapping the animation time intervals according to the user's interactions can be done using four methods: "></TextBlock>
                <TextBlock Margin="60,10,0,5" Foreground="{ThemeResource TextFillColorSecondaryBrush}"  Style="{StaticResource BaseTextBlockStyle}" Text="• InitializeIconState - Used to start the animation from the very first state - Normal." ></TextBlock>
                <TextBlock Margin="60,5" Foreground="{ThemeResource TextFillColorSecondaryBrush}"  Style="{StaticResource BaseTextBlockStyle}" Text="• Button_PointerEntered - Used to detect when the user hovers in. It also checks if the button has already been toggled, so it doesn't accidentally play the hover in animation again in case the button has been clicked." ></TextBlock>
                <TextBlock Margin="60,5" Foreground="{ThemeResource TextFillColorSecondaryBrush}"  Style="{StaticResource BaseTextBlockStyle}" Text="• Button_PointerExited - Used to detect when the user hovers out." ></TextBlock>
                <TextBlock Margin="60,5" Foreground="{ThemeResource TextFillColorSecondaryBrush}"  Style="{StaticResource BaseTextBlockStyle}" Text="• LottieButton_Click - Used to identify whether the button has been pressed or not." ></TextBlock>
                <TextBlock  Style="{StaticResource BaseTextBlockStyle}" Text="The C++ source code is provided below:"></TextBlock>
                <StackPanel Margin="0,0,0,0">
                    <Button x:Name="ShowCppButton" Content="Show C++" Click="ShowCppCode_Click" Margin="0,20,0,10" />
                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden" Height="300" Margin="0,0,0,10">
                        <!-- A TextBox to display C++ code -->
                        <TextBox x:Name="CppCodeTextBox" 
IsReadOnly="True" 
AcceptsReturn="True"
TextWrapping="Wrap"
Margin="0"
VerticalAlignment="Stretch"
HorizontalAlignment="Stretch"
MinWidth="300"
Visibility="Collapsed" />
                    </ScrollViewer>
                </StackPanel>
            </StackPanel>


            <StackPanel>
                <TextBlock Margin="50,1950,0,0" Style="{StaticResource TitleTextBlockStyle}" Text="Changing a Lottie Icon's Foreground"></TextBlock>
                <TextBlock Margin="50,90,0,0"    Style="{StaticResource BaseTextBlockStyle}">
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="When generating the class files from a console interface, it is important to add &quot;" ></Run>
                    <Run Text="-GenerateColorBindings"></Run>
                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="&quot; as an argument:"></Run>
                </TextBlock>
                <TextBox IsReadOnly="True" Text="LottieGen -InputFile AnimatedLogo.json -Language cppwinrt -WinUIVersion 3.0 -NameSpace CppWinUIGallery -GenerateColorBindings" Width="Auto" Margin="50,15,50,0"></TextBox>
                <TextBlock Margin="50,10,0,0" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="This adds to the generated header file of the class a table with the following attributes:"></TextBlock>
                <TextBlock Margin="110,10,0,0" Style="{StaticResource BaseTextBlockStyle}" Text="- Theme property"></TextBlock>
                <TextBlock Margin="110,10,0,0" Style="{StaticResource BaseTextBlockStyle}" Text="- Accessor"></TextBlock>
                <TextBlock Margin="110,10,0,0" Style="{StaticResource BaseTextBlockStyle}" Text="- Type"></TextBlock>
                <TextBlock Margin="110,10,0,0" Style="{StaticResource BaseTextBlockStyle}" Text="- Default value"></TextBlock>
                <TextBlock Margin="50,10,0,0" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="More specifically, the Accessor is later added to the .idl file for getting &amp; setting the color property. In this example, the icon's original colour is Yellow:"></TextBlock>
                <TextBox IsReadOnly="True" Text="Windows.UI.Color Color_FFD640{ get; set; };" Margin="50,10,50,0"></TextBox>
                <TextBlock Margin="50,20,0,0" Style="{StaticResource BaseTextBlockStyle}" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="This Accessor can be implemented in the .cpp file, letting the user choose another foreground during an event."></TextBlock>
                <TextBox IsReadOnly="True" Text=" IconSource().Color_FFD640(Windows::UI::Colors::Blue());" Margin="50,10,50,0"></TextBox>
            </StackPanel>
            <ToggleButton Click="LottieButtonTransparent_Click"   Width="75" IsEnabled="True" x:Name="LottieButtonTransparent" Margin="50,700,0,10"  >


                <AnimatedIcon x:Name="SearchAnimatedLottie" >
                    <AnimatedIcon.Source>
                        <local:TransparentLottie x:Name="IconSource"/>
                    </AnimatedIcon.Source>
                    <AnimatedIcon.FallbackIconSource>
                        <SymbolIconSource Symbol="GlobalNavigationButton"/>
                    </AnimatedIcon.FallbackIconSource>
                </AnimatedIcon>
            </ToggleButton>
            
          
        </Grid>
        


    </ScrollViewer>    
    
</Page>
